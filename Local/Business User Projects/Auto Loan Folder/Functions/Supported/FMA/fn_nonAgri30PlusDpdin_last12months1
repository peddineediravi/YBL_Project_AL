<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_nonAgri30PlusDpdin_last12months'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_nonAgri30PlusDpdin_last12months</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>boolean</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("fn_30+Dpd for colourcode for Latest 6 months Entering.....");
anApplicant is some Applicant;
historyLength is an integer initially 0;
numberOfMonths is an integer initially 0;
paymentHistory is a string initially "";
noOfDPDBounces is an integer initially 0;
month is an integer initially 0;
isColourCode is a boolean initially false;
Nondelqliveacounts is an integer initially 0;
todayDate is a date initially calendar().currentDate();
//testing freeze defult date is '27-Jan-2022';
//todayDate is a date  initially  '27-Jan-2022';
//todayDate=calendar().date(todayDate);

totalAmountOverdue is an real initially 0;

for each Applicant in blazeMessage.request.application.applicants do {
anApplicant =it; 
if(anApplicant.multiBureauReport is known and anApplicant.multiBureauReport.cibilResponse is (known and available) 
	and anApplicant.multiBureauReport.cibilResponse.accounts is (known and available) and 
anApplicant.multiBureauReport.cibilResponse.accounts.count > 0) then {
	for each Account in anApplicant.multiBureauReport.cibilResponse.accounts  such that(it.owenershipIndicator is (known and available)  and  it.owenershipIndicator is equal to (ignoring case)("JOINT" or "INDIVIDUAL") )do {	
	
      	//overdue Amount
			if(it.amountOverdue is  (known and available))then{
				totalAmountOverdue=totalAmountOverdue+it.amountOverdue;
			}
		
      if(  it.dateReportedAndCertified is  (known and available) and  it.dateOpenedOrDisbursed is  (known and available) and  todayDate.subtractInDays(it.dateReportedAndCertified).days>0 and
		todayDate.subtractInDays(it.dateReportedAndCertified).days<=360 and it.accountType <> (ignoring case)
		("CREDIT CARD" and "Credit Card" and "10" and "Secured Credit Card" and "31" and "Corporate Credit Card" and
		"35"  and "Loan on Credit Card" and "37" and "Kisan Credit Card" and
         "Business Loan – Priority Sector – Agriculture" and
         "Business Non-Funded Credit Facility – Priority Sector – Agriculture Tractor Loan"))then {
				month = 12-math().truncate(todayDate.subtractInDays(it.dateReportedAndCertified).days/30);
			//paymentHistory
			if(it.paymentHistory1 is (known and available)) then {
				paymentHistory = it.paymentHistory1;
			}
			if(it.paymentHistory2 is (known and available)) then {
				paymentHistory = paymentHistory.concat(it.paymentHistory2);
			}
		
			historyLength = paymentHistory.length();
			numberOfMonths = math().truncate(historyLength/3);      	
			paymentHistory = paymentHistory.replaceAll("X","0");
			paymentHistory = paymentHistory.replaceAll("DDD", "000");
			paymentHistory = paymentHistory.replaceAll("LSS", "180");
			paymentHistory = paymentHistory.replaceAll("SUB", "180");
			paymentHistory = paymentHistory.replaceAll("DBT", "180");
			paymentHistory = paymentHistory.replaceAll("SMA", "089");
			paymentHistory = paymentHistory.replaceAll("STD", "000");

			monthCounter is a integer initially 0;
			pos1 is an integer initially 0;
			pos2 is an integer initially 3;
			dpdValue is an integer initially 0;
			tempIntArray is some array of integer initially an array of integer;
        
			while(monthCounter <= numberOfMonths-1) do {
				dpdValue=paymentHistory.substring(pos1, pos2) as an integer;
				tempIntArray.append(dpdValue);
				pos1=pos2;
				pos2=pos2+3;
				monthCounter+=1;
			}			
			dpdArrCount is an integer initially 0;   
			
          	
			if(tempIntArray.count > 0) then {
				while(dpdArrCount < math().min(tempIntArray.count, month)) do{	
					if(tempIntArray[dpdArrCount] > 30) then {
							noOfDPDBounces = noOfDPDBounces +1;
					}
					dpdArrCount = dpdArrCount +1;
				}
			}
		}		
	}
}
}
print("noOfDPDBounces"noOfDPDBounces"totalAmountOverdue"totalAmountOverdue);
if(noOfDPDBounces>0 and totalAmountOverdue>10000)then{
	isColourCode =true;
}

return  isColourCode;
]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='Twp28X'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>