<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_Implement_FuzzyLogic'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_Implement_FuzzyLogic</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>real</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[

//return fussyLogic(aCibilCurrentAddress, aCurrentAddress);


input is a string;
pattern is a string;
proximity is a real initially 0;
m is an integer;
n is an integer;
i is an integer;
j is an integer;
tmp is an integer;
pre is an integer;


 if((aCurrentAddress).length()>(cibilAddress).length()) then
                  {
                    input=aCurrentAddress;
                    pattern=cibilAddress;
                  }
                else
                  {
                    { 
                     pattern=aCurrentAddress;
                    input=cibilAddress;
                    }
                   	m=input.length();
                    n=pattern.length();
                   
         		  }
					// Initialize array v
					v is an array of integer;
                    i = 0;
                    while (i <= n) do
                    {
                       v.insert(i,i);
					   
	                   i += 1;
                    }
					// 100% match if both strings are null
                    if ((n = 0) and (m = 0)) then
                    {
                        proximity = 100;
                    }
                    else
                    {
					// 0% match if one string is null but the other is not
						if (((n = 0) and (m <> 0))  or ((n <> 0) and (m = 0))) then
	                    {
                            proximity = 0;
                        }
                        else
	                    {
                            i = 1;
                            while (i <= m) do
                            {
							// This is similar to storing the upper row diagonal element. We will update this variable all time.
								pre = v[0];
								v[0] = i;
								j = 1;
                                while (j <= n) do
	                            {
								// Store the old value at index j in a temporary variable so that we can use it again in next index call,
								// as we will be updating the value at index j in current call.
									tmp = v[j];
									if input.charAt(i-1) = (ignoring case) pattern.charAt(j-1) then
                                    {
									// Use the value of previous row / old value
										v[j] = pre;
                                    }
									else
										// "Pre" is the cost of substitution, v[j-1] is insertion cost and v[j] is deletion cost.
                                    {
										v[j] = math().min( pre , math().min( v[j-1],v[j] ) ) +1;
                                    }
									j += 1;
									// Updating again the previous value of v[j] that was stored before updating v[j] for the call of index j+1.
									pre = tmp;
                                }
                                i +=1;
                            }
							// Compute the proximity percentage as (length - Levenshtein distance) / length * 100
                            proximity = ((m - v[n]) / m) * 100;
						}
                    }	

return proximity;]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='6m2FfO'>
    <instance ref='ParameterNameVH'>
     <value>cibilAddress</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>string</value>
    </instance>
   </item>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='8xiUbc'>
    <instance ref='ParameterNameVH'>
     <value>aCurrentAddress</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>string</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>