<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_CheckApplicantCibilScore'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_CheckApplicantCibilScore</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>boolean</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[if(cibilResponse is known and cibilResponse.scores.count > 0)then{
   
  if(operator is equal to ComOperator.LargerThanEqualTo and (at least 1 ScoreSegment in cibilResponse.scores satisfy(it.scoreName is equal to (ignoring case)"CIBIL" and it.score >= constantValue)))
then{
  return true;
}else if(operator is equal to ComOperator.LessThanEqualTo and (at least 1 ScoreSegment in cibilResponse.scores satisfy(it.scoreName is equal to (ignoring case) "CIBIL" and it.score <= constantValue)))
then{
  return true;
}else if(operator is equal to ComOperator.LargerThan and (at least 1 ScoreSegment in cibilResponse.scores satisfy(it.scoreName is equal to (ignoring case)"CIBIL" and it.score > constantValue)))
then{
  return true;
}else if(operator is equal to ComOperator.LessThan and (at least 1 ScoreSegment in cibilResponse.scores satisfy(it.scoreName is equal to (ignoring case) "CIBIL" and it.score <  constantValue)))
then{
  return true;
}else if(operator is equal to ComOperator.EqualTo and (at least 1 ScoreSegment in cibilResponse.scores satisfy(it.scoreName is equal to (ignoring case) "CIBIL" and it.score = constantValue)))
then{
  return true;
}else{
  return false;
}
}else{
  return false;
}]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='PN2UcO'>
    <instance ref='ParameterNameVH'>
     <value>cibilResponse</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>CibilReport</value>
    </instance>
   </item>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='D7Rg2r'>
    <instance ref='ParameterNameVH'>
     <value>operator</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>ComOperator</value>
    </instance>
   </item>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='FK0GCT'>
    <instance ref='ParameterNameVH'>
     <value>constantValue</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>integer</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>