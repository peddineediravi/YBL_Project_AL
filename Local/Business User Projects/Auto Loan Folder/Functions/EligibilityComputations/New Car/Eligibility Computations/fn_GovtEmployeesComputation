<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_GovtEmployeesComputation'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_GovtEmployeesComputation</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[anApplication is some Application initially blazeMessage.request.application;
anDeviation is some Deviation initially an Deviation;
isSalariedApplicantMeetsMinimumNorms is a boolean initially false;
assetDetails is some AssetDetails initially anApplication.assetDetails;
theBlazeMessageBT.maxEligibleAmount = 0;
maxEligibleAmount is a real initially 0;   		
anApplicant is some Applicant;
higerIncomeApplicant is some Applicant;
totalIncome is a real initially 0;
totalObligation is a real initially 0;
higherIncome is a real initially 0;
meetingMinimumIncomeApplicant is some Applicant;
//  Govt Employee Program
if (anApplication.schemeGroup is known and anApplication.schemeGroup="10")then
  {
    	maxEligibleAmount=0;
    	isSalariedApplicantMeetsMinimumNorms = false;
    //Checking whether employee meeting minimum income norms.
    	if(blazeMessage.request is known and blazeMessage.request.application is known and blazeMessage.request.application.applicants is known and blazeMessage.request.application.applicants.count > 0)then{
          		for each Applicant in blazeMessage.request.application.applicants such that (it.customerSegment is known and customerSegment ="1") do {    
                  			anApplicant=it;
                 
 			if(isSalariedApplicantMeetsMinimumNorms is available and isSalariedApplicantMeetsMinimumNorms = false) then {                 
  				  isSalariedApplicantMeetsMinimumNorms = (it.annualIncome.totalIncome >= DT_MinimumIncomeLookup(anApplication.schemeGroup,anApplication.scheme,anApplicant.customerSegment,assetDetails.detailAssetLoan,assetDetails.newVehicleDetails.assetCost));
 			 }     
		}
        }
    		
    	
    		for each Applicant in blazeMessage.request.application.applicants such that( it.annualIncome is known and  it.annualIncome.incomeBasedEligbileAmount is known) do {
   		        // Employee meeting minimum income norms then clubbing income of all other co-applicants income for elibility.
				if(isSalariedApplicantMeetsMinimumNorms is (known and available) and isSalariedApplicantMeetsMinimumNorms = true) then { // Sum of all applicants income based eligbile amount (i.e income*multiplier)
           			maxEligibleAmount = maxEligibleAmount + it.annualIncome.incomeBasedEligbileAmount;
                  	totalIncome=totalIncome+it.annualIncome.totalIncome;
                  	totalObligation = totalObligation+it.annualIncome.totalObligation;
    		  }
          	 else if(isSalariedApplicantMeetsMinimumNorms is (known and available) and isSalariedApplicantMeetsMinimumNorms = false) then { // Maximum of all applicants income based eligible amount if none of them meeting minimum income norm.	               
               		if(higherIncome<it.annualIncome.totalIncome) then{
                      	 higherIncome=it.annualIncome.totalIncome;
                         maxEligibleAmount = it.annualIncome.incomeBasedEligbileAmount; 
            		     higerIncomeApplicant=it;
                   }               
             }               
       }
   theBlazeMessageBT.maxEligibleAmount = maxEligibleAmount;
    

   // IIR Computation
 
   higherIncome = 0;
   foir is a real initially 0;
   applicantResidentPropertyType is a string;
   salariedHigherIncomeApplicant is some Applicant;
   
    // Finding higer income applicant profile for applying on IIR grid .
	for each Applicant in blazeMessage.request.application.applicants such that( it.annualIncome is known and  it.annualIncome.totalIncome is known and it.customerSegment is known and customerSegment ="1") do {
		if (higherIncome<it.annualIncome.totalIncome) then {
					  higherIncome=it.annualIncome.totalIncome;
					  salariedHigherIncomeApplicant=it;
		}                           
	}  
   
    if(isSalariedApplicantMeetsMinimumNorms is (known and available) and isSalariedApplicantMeetsMinimumNorms = true) then { 
      		 	if(salariedHigherIncomeApplicant is (known and available)) then{
      					 foir=((totalObligation+(blazeMessage.request.application.loanDetails.loanEMI*12))/totalIncome)*100;  
      					applicantResidentPropertyType = fn_GetApplicantPropertyType(salariedHigherIncomeApplicant);
						anDeviation = DT_IIRNorms(anApplication.schemeGroup,anApplication.scheme,blazeMessage.request.application.assetDetails.detailAssetLoan,(salariedHigherIncomeApplicant as a BlazeApplicant).cibilScore,salariedHigherIncomeApplicant.customerSegment,applicantResidentPropertyType,foir);
						fn_AppendDeviations(anDeviation);
                }
   	 }
   else if(isSalariedApplicantMeetsMinimumNorms is (known and available) and isSalariedApplicantMeetsMinimumNorms = false) then{
     			// Higher income applicant details used for IIR as eligibility derived on this applicant income.
     			if(salariedHigherIncomeApplicant is (known and available)) then{
     					foir=((higerIncomeApplicant.annualIncome.totalObligation+(blazeMessage.request.application.loanDetails.loanEMI*12))/higerIncomeApplicant.annualIncome.totalIncome)*100;  
    		   			applicantResidentPropertyType = fn_GetApplicantPropertyType(salariedHigherIncomeApplicant);
                  		  theBlazeMessageBT.foir =foir;
						anDeviation = DT_IIRNorms(anApplication.schemeGroup,anApplication.scheme,blazeMessage.request.application.assetDetails.detailAssetLoan,(salariedHigherIncomeApplicant as a BlazeApplicant).cibilScore,salariedHigherIncomeApplicant.customerSegment,applicantResidentPropertyType,foir);
						fn_AppendDeviations(anDeviation); 
                }
       }
  } ]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='VTQleH'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>