<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='DSG71szD5AH5G0pcZCfjmcoPvq0' name='finalUtilization'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='nameVH'>
  <value>finalUtilization</value>
 </instance>
 <instance ref='typeVH'>
  <value>real</value>
 </instance>
 <instance ref='descriptionVH'>
  <value></value>
 </instance>
 <instance ref='termPropertyVH'>
 </instance>
 <instance ref='isNeededEventRuleVH'>
  <instance ref='__ENTITY_PROPERTIES__VH__'>
  </instance>
  <instance ref='calculationVH'>
   <value><![CDATA[// NTC
tempFinalUtilization is a real initially -222222;

totalLoanAmount is a real initially 0;
totalBalance is a real initially 0;
totalCCCreditLimit is a real initially 0;
totalCCBalance is a real initially 0;
totalActiveAccounts is a integer initially 0;
ccUtilization is a real initially 0;
otherUtilization is a real initially 0;

currentDate is a date initially calendar().currentDate();
year is a string initially currentDate.year as a string ;
month is a string initially calendar().shortMonthName(currentDate.month);

firstDateOfCurrentMonth is a date;
firstDateOfCurrentMonth=calendar().date(month"-"year,"MMM-yyyy");
//print("First day of Month "firstDateOfCurrentMonth);

firstDateOfLast4Months is a date;
firstDateOfLast4Months=firstDateOfCurrentMonth - 4 months;
//print("First date of last 3 months "firstDayOfLast4Months);


anApplicant is some Applicant;
//print("CIBIL===="theApplicationScoreCard.termSetInput.request.application.applicants[0].multiBureauReport.cibilResponse.scores[0].scoreName.matches("CIBIL"));
for each Applicant in theApplicationScoreCard.termSetInput.request.application.applicants such that(it.applicantType is known and it.applicantType is equal to "P" and it.multiBureauReport is known and it.multiBureauReport.cibilResponse is known and it.multiBureauReport.cibilResponse.scores.count > 0)
do{
  				anApplicant = it;
		  if(at least 1 ScoreSegment in anApplicant.multiBureauReport.cibilResponse.scores satisfy(it.scoreName is known and it.scoreName is equal to (ignoring case)"CIBIL" and it.score is known and  it.score > -1))
          then{
					if(anApplicant.multiBureauReport is known and anApplicant.multiBureauReport.cibilResponse is known and anApplicant.multiBureauReport.cibilResponse.accounts is known and anApplicant.multiBureauReport.cibilResponse.accounts.count >0)
                    then{
                      		for each Account in anApplicant.multiBureauReport.cibilResponse.accounts such that(it.accountType is known and it.dateClosed is unknown and it.highCreditOrSanctionedAmount is known and it.currentBalance is known)
							do{
							
								if(it.dateClosed is unknown)then{
							
										totalActiveAccounts = totalActiveAccounts+1;
										print("totalActiveAccounts===="totalActiveAccounts);
										if(it.creditLimit is unknown)
										then{
												it.creditLimit=0;
										}
										
										totalCCCreditLimit = totalCCCreditLimit + math().max(it.highCreditOrSanctionedAmount as a real, it.creditLimit);
										totalCCBalance = totalCCBalance + it.currentBalance;
								}
							}
                    }
            			if(totalCCCreditLimit > 0) then  {
							ccUtilization = (totalCCBalance/totalCCCreditLimit)*100;
                         }            					
						if(totalActiveAccounts > 0) then  {
							tempFinalUtilization = (ccUtilization);//totalActiveAccounts;
                         }else {
                          		//No active accounts;
                          		tempFinalUtilization =-111111; 
                           } 
				} else{
                  // NTC
                  tempFinalUtilization = -222222;
                }
}
it.finalUtilization = tempFinalUtilization;
theApplicationScoreCard.termSetInput.charNameToCharVal["Current Utilization on Active Tradelines"] = it.finalUtilization as a string;]]></value>
  </instance>
 </instance>
 <instance ref='constraintContainerVH'>
  <instance-selection ref='constraintVH'>
   <item template='Atv03JffIeVVgsPZppyIx4mkGHC.template5' id='7HPkXG'>
    <instance ref='fromVH'>
     <value></value>
    </instance>
    <instance ref='toVH'>
     <value></value>
    </instance>
    <instance ref='constraintNameVH'>
     <value>Range</value>
    </instance>
    <instance ref='constraintEntriesVH'>
    </instance>
   </item>
  </instance-selection>
  <instance ref='termTypeConstraintTemplateAssocVH'>
   <value>Atv03JffIeVVgsPZppyIx4mkGHC.template5</value>
  </instance>
 </instance>
</instantiation>