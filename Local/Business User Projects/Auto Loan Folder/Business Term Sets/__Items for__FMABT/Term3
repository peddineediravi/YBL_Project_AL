<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='DSG71szD5AH5G0pcZCfjmcoPvq0' name='Term3'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='nameVH'>
  <value>DPD180last2years</value>
 </instance>
 <instance ref='typeVH'>
  <value>boolean</value>
 </instance>
 <instance ref='descriptionVH'>
  <value></value>
 </instance>
 <instance ref='termPropertyVH'>
 </instance>
 <instance ref='isNeededEventRuleVH'>
  <instance ref='__ENTITY_PROPERTIES__VH__'>
  </instance>
  <instance ref='calculationVH'>
   <value><![CDATA[theFMABT.DPD180last2years=false;
Golddpd30plus is an integer initially 0;
countofdedbounce is an integer initially 0;
anApplicant is some Applicant;
historyLength is an integer initially 0;
numberOfMonths is an integer initially 0;
paymentHistory is a string initially "";
noOfDPDBounces is an integer initially 0;
months is an integer initially 0;
todayDate is a date initially calendar().currentDate();

for each Applicant in theFMABT.termSetInput.request.application.applicants  do {
  anApplicant=it;
  if(it.multiBureauReport is known and it.multiBureauReport.cibilResponse is (known and available) and it.multiBureauReport.cibilResponse.accounts is (known and available) ) then{
    	 for each Account in anApplicant.multiBureauReport.cibilResponse.accounts such that (it.accountType is (known and available)) do{
                  if(  it.accountType is (known and available) and it.accountType is equal to (ignoring case) ("Tractor Loan" or "Kisan Credit Card" or
                    "CURRENT BUSINESS NON-FUNDED CREDIT FACILITY – PRIORITY SECTOR – AGRICULTURE" or
					"BUSINESS NON-FUNDED CREDIT FACILITY-PRIORITY SECTOR-AGRICULTURAL" or
					"BUSINESS LOAN-PRIORITY SECTOR-AGRICULTURAL" or
					"CURRENT BUSINESS LOAN – PRIORITY SECTOR – AGRICULTURE" ) and  it.dateReportedAndCertified is (known and available) and
                               todayDate.subtractInDays(it.dateReportedAndCertified).days>0  and todayDate.subtractInDays(it.dateReportedAndCertified).days<720 )then{
             months =24-math().truncate(todayDate.subtractInDays(it.dateReportedAndCertified).days/30);
                    if(it.paymentHistory1 is (known and available)) then {
                          paymentHistory = it.paymentHistory1;
                      }
                      if(it.paymentHistory2 is (known and available)) then {
                          paymentHistory = paymentHistory.concat(it.paymentHistory2);
                      }
                      historyLength = paymentHistory.length();
                      numberOfMonths = math().truncate(historyLength/3);
                  
                  		paymentHistory = paymentHistory.replaceAll("X","0");
						paymentHistory = paymentHistory.replaceAll("DDD", "000");
						paymentHistory = paymentHistory.replaceAll("LSS", "180");
						paymentHistory = paymentHistory.replaceAll("SUB", "180");
						paymentHistory = paymentHistory.replaceAll("DBT", "180");
						paymentHistory = paymentHistory.replaceAll("SMA", "089");
                  		paymentHistory = paymentHistory.replaceAll("STD", "000");
             monthCounter is a integer initially 0;
			pos1 is an integer initially 0;
			pos2 is an integer initially 3;
			dpdValue is an integer initially 0;
			tempIntArray is some array of integer initially an array of integer;
        
			while(monthCounter <= numberOfMonths-1) do {
				dpdValue=paymentHistory.substring(pos1, pos2) as an integer;
				tempIntArray.append(dpdValue);
				pos1=pos2;
				pos2=pos2+3;
				monthCounter+=1;
			}			
			dpdArrCount is an integer initially 0;    
          	
			if(tempIntArray.count > 0) then {
				while(dpdArrCount < math().min(tempIntArray.count, months)) do{	
            //     print("dpdArrCount"dpdArrCount"months="months"tempIntArray["dpdArrCount"]"tempIntArray[dpdArrCount]);
					if(tempIntArray[dpdArrCount] >=180) then {
          //            print("tempIntArray["dpdArrCount"]"tempIntArray[dpdArrCount]);
					noOfDPDBounces = noOfDPDBounces +1;
                      Golddpd30plus=Golddpd30plus+1;                    
        //              print("DPDGT0==="theCommercialVehicleBT.DPDGT0);
					}
					dpdArrCount = dpdArrCount +1;
				}
			}
		}		
	}
  }
}
if(Golddpd30plus>=1)then{
    theFMABT.DPD180last2years=true;
}
print("DPD 180 in last 2 years  for agri==="theFMABT.DPD180last2years);]]></value>
  </instance>
 </instance>
 <instance ref='constraintContainerVH'>
  <instance-selection ref='constraintVH'>
   <item template='Atv03JffIeVVgsPZppyIx4mkGHC.template5' id='8WcRg9'>
    <instance ref='fromVH'>
     <value></value>
    </instance>
    <instance ref='toVH'>
     <value></value>
    </instance>
    <instance ref='constraintNameVH'>
     <value>Range</value>
    </instance>
    <instance ref='constraintEntriesVH'>
    </instance>
   </item>
  </instance-selection>
  <instance ref='termTypeConstraintTemplateAssocVH'>
   <value>Atv03JffIeVVgsPZppyIx4mkGHC.template5</value>
  </instance>
 </instance>
</instantiation>