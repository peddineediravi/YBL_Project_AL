<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='DSG71szD5AH5G0pcZCfjmcoPvq0' name='currentDeliquency'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='nameVH'>
  <value>currentDelinquency</value>
 </instance>
 <instance ref='typeVH'>
  <value>integer</value>
 </instance>
 <instance ref='descriptionVH'>
  <value></value>
 </instance>
 <instance ref='termPropertyVH'>
 </instance>
 <instance ref='isNeededEventRuleVH'>
  <instance ref='__ENTITY_PROPERTIES__VH__'>
  </instance>
  <instance ref='calculationVH'>
   <value><![CDATA[tempCurrentDelinquecy is an integer initially -111111;
anApplicant is some BlazeApplicant;
currentDate is a date initially calendar().currentDate();
year is a string initially currentDate.year as a string ;
month is a string initially calendar().shortMonthName(currentDate.month);

firstDateOfCurrentMonth is a date;
firstDateOfCurrentMonth=calendar().date(month"-"year,"MMM-yyyy");
print("First day of Month "firstDateOfCurrentMonth);

firstDateOfLast3Months is a date;
firstDateOfLast3Months=firstDateOfCurrentMonth - 3 months;
print("First date of last 3 months "firstDateOfLast3Months);
Golddpd30plus is an integer initially 0;
countofdedbounce is an integer initially 0;
historyLength is an integer initially 0;
numberOfMonths is an integer initially 0;
paymentHistory is a string initially "";
noOfDPDBounces is an integer initially 0;
months is an integer initially 0;
todayDate is a date initially calendar().currentDate();

dpdList is some array of integer initially an array of integer;

for each BlazeApplicant in theApplicationScoreCard.termSetInput.blazeApplicants such that(it.applicantType is known and it.applicantType is equal to "P" and it.scores is known and it.scores.count>0)
do{
  		  anApplicant = it;
		  if(at least 1 ScoreSegment in  anApplicant.scores satisfy(it.scoreName is known and it.scoreName is equal to (ignoring case)"CIBIL" and it.score is known and  it.score > 5))
          then{
					if(anApplicant.blazeAccounts is known and anApplicant.blazeAccounts.count >0)then{
				
                   		for each BlazeAccount in anApplicant.blazeAccounts such that(it.dateClosed is unknown and it.dateReportedAndCertified is known and it.paymentHistories is known and it.paymentHistories.count>0)do{		
						 
//						  if(it.dateReportedAndCertified is later than or equal to firstDateOfLast3Months and it.dateReportedAndCertified is earlier than or equal to  firstDateOfCurrentMonth) then{											
				if( (calendar().currentDate()).subtractInDays(it.dateReportedAndCertified).days<=90)then{
					months =3-math().truncate(todayDate.subtractInDays(it.dateReportedAndCertified).days/30);
                          if(it.paymentHistory1 is (known and available)) then {
                          paymentHistory = it.paymentHistory1;
                      }
                      if(it.paymentHistory2 is (known and available)) then {
                          paymentHistory = paymentHistory.concat(it.paymentHistory2);
                      }
                      historyLength = paymentHistory.length();
                      numberOfMonths = math().truncate(historyLength/3);
                  
                  		paymentHistory = paymentHistory.replaceAll("X","0");
						paymentHistory = paymentHistory.replaceAll("DDD", "000");
						paymentHistory = paymentHistory.replaceAll("LSS", "180");
						paymentHistory = paymentHistory.replaceAll("SUB", "180");
						paymentHistory = paymentHistory.replaceAll("DBT", "180");
						paymentHistory = paymentHistory.replaceAll("SMA", "089");
                  		paymentHistory = paymentHistory.replaceAll("STD", "000");
             monthCounter is a integer initially 0;
			pos1 is an integer initially 0;
			pos2 is an integer initially 3;
			dpdValue is an integer initially 0;
			tempIntArray is some array of integer initially an array of integer;
        
			while(monthCounter <= numberOfMonths-1) do {
				dpdValue=paymentHistory.substring(pos1, pos2) as an integer;
				tempIntArray.append(dpdValue);
				pos1=pos2;
				pos2=pos2+3;
				monthCounter+=1;
			}			
			dpdArrCount is an integer initially 0;    
          	
			if(tempIntArray.count > 0) then {
				while(dpdArrCount < math().min(tempIntArray.count, months)) do{	
            //     print("dpdArrCount"dpdArrCount"months="months"tempIntArray["dpdArrCount"]"tempIntArray[dpdArrCount]);
					if(tempIntArray[dpdArrCount] >0) then {
          //            print("tempIntArray["dpdArrCount"]"tempIntArray[dpdArrCount]);
					noOfDPDBounces = noOfDPDBounces +1;
                      Golddpd30plus=Golddpd30plus+1;                    
        //              print("DPDGT0==="theCommercialVehicleBT.DPDGT0);
					}
					dpdArrCount = dpdArrCount +1;
				}
			}
		}		
	}
  }
}else{
        tempCurrentDelinquecy = -222222 //NTC
}
}
//if(Golddpd30plus>0)then	{				  	
//tempCurrentDelinquecy=Golddpd30plus;
//}
//else{
	///tempCurrentDelinquecy=0;
//}		
it.currentDelinquency = tempCurrentDelinquecy;
theApplicationScoreCard.termSetInput.charNameToCharVal["Current Month Delinquency"] = it.currentDelinquency as a string;]]></value>
  </instance>
 </instance>
 <instance ref='constraintContainerVH'>
  <instance-selection ref='constraintVH'>
   <item template='Atv03JffIeVVgsPZppyIx4mkGHC.template5' id='5ovu3M'>
    <instance ref='fromVH'>
     <value></value>
    </instance>
    <instance ref='toVH'>
     <value></value>
    </instance>
    <instance ref='constraintNameVH'>
     <value>Range</value>
    </instance>
    <instance ref='constraintEntriesVH'>
    </instance>
   </item>
  </instance-selection>
  <instance ref='termTypeConstraintTemplateAssocVH'>
   <value>Atv03JffIeVVgsPZppyIx4mkGHC.template5</value>
  </instance>
 </instance>
</instantiation>