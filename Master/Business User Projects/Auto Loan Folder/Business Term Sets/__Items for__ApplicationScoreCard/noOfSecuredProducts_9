<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='DSG71szD5AH5G0pcZCfjmcoPvq0' name='noOfSecuredProducts'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='nameVH'>
  <value>noOfSecuredProducts</value>
 </instance>
 <instance ref='typeVH'>
  <value>integer</value>
 </instance>
 <instance ref='descriptionVH'>
  <value></value>
 </instance>
 <instance ref='termPropertyVH'>
 </instance>
 <instance ref='isNeededEventRuleVH'>
  <instance ref='__ENTITY_PROPERTIES__VH__'>
  </instance>
  <instance ref='calculationVH'>
   <value><![CDATA[print("Entering noOfSecuredProducts::::::::::");
AccountsCount is a integer initially 0;
anApplicant is some BlazeApplicant;
anAccount is some BlazeAccount;
isSecureProduct is a boolean initially false;
unsecuredProductCount is a integer initially 0;
securedProductCount is a integer initially 0;
cibilScoreMatch is a boolean initially false;
NoOfDPDs is a integer initially 0;
tempNoOfSecuredProducts is an integer initially 0;
dpdinmonths is a integer initially 0;
months1 is a integer initially 0;

currentDate is a date initially calendar().currentDate();
year is a string initially currentDate.year as a string ;
month is a string initially calendar().shortMonthName(currentDate.month);

firstDateOfCurrentMonth is a date;
firstDateOfCurrentMonth=calendar().date(month"-"year,"MMM-yyyy");
print("First day of Month "firstDateOfCurrentMonth);

firstDateOfLast6Months is a date;
firstDateOfLast6Months=firstDateOfCurrentMonth - 6 months;
print("First date of last 6 months "firstDateOfLast6Months);


for each BlazeApplicant in theApplicationScoreCard.termSetInput.blazeApplicants such that(it.applicantType is known and it.applicantType is equal to "P" 
and it.scores is known and it.scores.count>0) do {
anApplicant = it;

	if(at least 1 ScoreSegment in  anApplicant.multiBureauReport.cibilResponse.scores satisfies (it.scoreName is known and 
	it.scoreName is equal to (ignoring case)"CIBIL" and it.score is known and it.score>0))then{
		cibilScoreMatch=true;	
  
	if(anApplicant.multiBureauReport is known and anApplicant.multiBureauReport.cibilResponse is known and
	anApplicant.multiBureauReport.cibilResponse.accounts is known  and anApplicant.multiBureauReport.cibilResponse.accounts.count>0)then{
		//AccountsCount=anApplicant.blazeAccounts.count;
		for each Account in anApplicant.multiBureauReport.cibilResponse.accounts such that
		(it.dateReportedAndCertified is known and it.accountType is known)do{
			//anAccount=it;
			AccountsCount=anApplicant.blazeAccounts.count;
			
  
			//AccountsCount=AccountsCount+1;
			print("isSecureProduct before====="isSecureProduct);
          	print("it.accountType:::::"it.accountType);
			isSecureProduct = DT_SecuredProductsList(it.accountType); 
			
          print("isSecureProduct::::::::"isSecureProduct);
          print("dateOfReceipt-dateReportedAndCertified="theApplicationScoreCard.termSetInput.request.application.applicationInfo.dateOfReceipt.subtractInDays(it.dateReportedAndCertified));
          print("dateOfReceipt-dateClosed"theApplicationScoreCard.termSetInput.request.application.applicationInfo.dateOfReceipt.subtractInDays(it.dateClosed).days);
		  if(isSecureProduct is (known and available)  and isSecureProduct is equal to true and 
			theApplicationScoreCard.termSetInput.request.application.applicationInfo.dateOfReceipt is known and
			it.dateClosed is unknown and it.dateReportedAndCertified is known and
			theApplicationScoreCard.termSetInput.request.application.applicationInfo.dateOfReceipt.subtractInDays(it.dateReportedAndCertified).days <= 180)then{
				dpdinmonths = math().floor(theApplicationScoreCard.termSetInput.request.application.applicationInfo.dateOfReceipt.subtractInDays(it.dateReportedAndCertified).days/30);
			print("dpdinmonths"dpdinmonths);
			months1=6-dpdinmonths;
				securedProductCount=securedProductCount+1;
			}	else if(isSecureProduct is (known and available)  and isSecureProduct is equal to true and 
			theApplicationScoreCard.termSetInput.request.application.applicationInfo.dateOfReceipt is known and
			it.dateClosed is known and it.dateReportedAndCertified is known and
			theApplicationScoreCard.termSetInput.request.application.applicationInfo.dateOfReceipt.subtractInDays(it.dateClosed).days <= 180 and 
			theApplicationScoreCard.termSetInput.request.application.applicationInfo.dateOfReceipt.subtractInDays(it.dateReportedAndCertified).days <= 180)then{
				dpdinmonths = math().floor(theApplicationScoreCard.termSetInput.request.application.applicationInfo.dateOfReceipt.subtractInDays(it.dateReportedAndCertified).days/30);
				print("dpdinmonths"dpdinmonths);
				months1=6-dpdinmonths;
				securedProductCount=securedProductCount+1;
			} 	
          if(isSecureProduct is (known and available)  and isSecureProduct is equal to false)then{
				unsecuredProductCount=unsecuredProductCount+1;
			}
							
			
		}
		}
   		print("AccountsCount========"AccountsCount);
		print("unsecuredProductCount========"unsecuredProductCount);
   		print("securedProductCount========="securedProductCount);
		}
		else
		{
			print("NTC"); ////score value 63
			tempNoOfSecuredProducts=-222222;
		}
}



////NTC
	if(cibilScoreMatch is equal to true)then{	
		if(AccountsCount=unsecuredProductCount or securedProductCount =0)then{
			print("all are unSecured Products");  ///score value 70   
			tempNoOfSecuredProducts=-999999;
		}
		else {
				print("Secured Products");
				
          		 NoOfDPDs=fn_noOfDPDInLastXMonths(theApplicationScoreCard.termSetInput,months1);
				 
				if(NoOfDPDs>0)then
				{
					//>=1  DPD 49                 
                  print("NoOfDPDs::::::"NoOfDPDs);
					tempNoOfSecuredProducts=NoOfDPDs;
				}
				else{
					//0 DPD 68 
                 	tempNoOfSecuredProducts=NoOfDPDs;
				}
		}	
	}	
it.noOfSecuredProducts = tempNoOfSecuredProducts;
print("tempNoOfSecuredProducts:::::::::"tempNoOfSecuredProducts);
theApplicationScoreCard.termSetInput.charNameToCharVal["No of Secured Products"] = it.noOfSecuredProducts as a string;]]></value>
  </instance>
 </instance>
 <instance ref='constraintContainerVH'>
  <instance-selection ref='constraintVH'>
   <item template='Atv03JffIeVVgsPZppyIx4mkGHC.template5' id='IR4XGa'>
    <instance ref='fromVH'>
     <value></value>
    </instance>
    <instance ref='toVH'>
     <value></value>
    </instance>
    <instance ref='constraintNameVH'>
     <value>Range</value>
    </instance>
    <instance ref='constraintEntriesVH'>
    </instance>
   </item>
  </instance-selection>
  <instance ref='termTypeConstraintTemplateAssocVH'>
   <value>Atv03JffIeVVgsPZppyIx4mkGHC.template5</value>
  </instance>
 </instance>
</instantiation>