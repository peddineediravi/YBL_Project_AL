<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='DSG71szD5AH5G0pcZCfjmcoPvq0' name='noOfSecuredProducts'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='nameVH'>
  <value>noOfSecuredProducts</value>
 </instance>
 <instance ref='typeVH'>
  <value>integer</value>
 </instance>
 <instance ref='descriptionVH'>
  <value></value>
 </instance>
 <instance ref='termPropertyVH'>
 </instance>
 <instance ref='isNeededEventRuleVH'>
  <instance ref='__ENTITY_PROPERTIES__VH__'>
  </instance>
  <instance ref='calculationVH'>
   <value><![CDATA[tempNoOfSecuredProducts is an integer initially 0;
anApplicant is some BlazeApplicant;
anAccount is some BlazeAccount;

currentDate is a date initially calendar().currentDate();
year is a string initially currentDate.year as a string ;
month is a string initially calendar().shortMonthName(currentDate.month);

firstDateOfCurrentMonth is a date;
firstDateOfCurrentMonth=calendar().date(month"-"year,"MMM-yyyy");
print("First day of Month "firstDateOfCurrentMonth);

firstDateOfLast6Months is a date;
firstDateOfLast6Months=firstDateOfCurrentMonth - 6 months;
print("First date of last 6 months "firstDateOfLast6Months);

noOfMonthsBetween is a integer initially 0;
reportedMonthDate is a date;

for each BlazeApplicant in theApplicationScoreCard.termSetInput.blazeApplicants such that(it.applicantType is known and it.applicantType is equal to "P" and it.scores is known and it.scores.count>0) do {
		anApplicant = it;
		tempNoOfSecuredProducts =0;
		
	  if(at least 1 ScoreSegment in  anApplicant.scores satisfy(it.scoreName is known and it.scoreName is equal to (ignoring case)"CIBIL" and it.score is known and  it.score > 5))then {
				if(anApplicant.blazeAccounts is known and anApplicant.blazeAccounts.count >0) then {
					for each BlazeAccount in anApplicant.blazeAccounts such that(it.dateClosed is unknown and it.dateReportedAndCertified is known) do {
						anAccount = it;
						isSecureProduct is a boolean initially false;
						isSecureProduct = DT_SecuredProductsList(anAccount.accountType);                      
						if(isSecureProduct is available and isSecureProduct = true)	then {
						
								//Checking whether reported date is in range of last 6 months from current month.
								if((it.dateReportedAndCertified is later than or equal to firstDateOfLast6Months and it.dateReportedAndCertified is earlier than firstDateOfCurrentMonth)and anAccount.paymentHistories is known and anAccount.paymentHistories.count>0)then {
									print("payment history" anAccount.paymentHistories);
                                  	//paymentHist is an integer initially 0;
                                  	counterInt is an integer initially 0;
                                  	for each integer in anAccount.paymentHistories do{
                                      //paymentHist = it;
                                      counterInt = counterInt +1;
                                      //print("payment hist in loop " paymentHist);
                                    }
                                  	//print("available value " paymentHist);
                                  	//print("length of payment hist " paymentHist.toString().length());
                                  	print("counter int value " counterInt);
									print("reported date is " it.dateReportedAndCertified);
									//year=it.dateReportedAndCertified.year as a string;
									//month=calendar().shortMonthName(it.dateReportedAndCertified.month);
									//reportedMonthDate=calendar().date(month"-"year,"MMM-yyyy");	
                                  	//print("report month date is " reportedMonthDate);
									
									//Finding number of months between reported month to backward to first month of 6th month duration.
									//noOfMonthsBetween = reportedMonthDate.subtractInMonths(firstDateOfLast6Months).months; 
                                  	//print("no of months difference value " noOfMonthsBetween);
                                  
									counter is a integer initially 0;									
									//if (noOfMonthsBetween=0) then{ // reported month and first month of 6 months duration is same.
                                    if (counterInt=0) then{
										if(anAccount.paymentHistories[0]>0) then
											tempNoOfSecuredProducts = tempNoOfSecuredProducts +1;
									}
									
									//while(counter<noOfMonthsBetween) do
                                    while(counter<counterInt and counter < 6) do
									{
										if(anAccount.paymentHistories[counter]>0) then {
											tempNoOfSecuredProducts = tempNoOfSecuredProducts +1; }
										counter+=1;
									}
								
								}
						}                     
					}
				}
               else {
                 	 tempNoOfSecuredProducts = -111111;
               }                 
		   }
  		else {
					tempNoOfSecuredProducts = -222222; //NTC
        }
}
 if (tempNoOfSecuredProducts = -111111 ) then { 
			tempNoOfSecuredProducts =0;	 
}
else  if (tempNoOfSecuredProducts = 0 ) then { 
			tempNoOfSecuredProducts =-999999;	 // No secure products
}

it.noOfSecuredProducts = tempNoOfSecuredProducts;
theApplicationScoreCard.termSetInput.charNameToCharVal["No of Secured Products"] = it.noOfSecuredProducts as a string;]]></value>
  </instance>
 </instance>
 <instance ref='constraintContainerVH'>
  <instance-selection ref='constraintVH'>
   <item template='Atv03JffIeVVgsPZppyIx4mkGHC.template5' id='IR4XGa'>
    <instance ref='fromVH'>
     <value></value>
    </instance>
    <instance ref='toVH'>
     <value></value>
    </instance>
    <instance ref='constraintNameVH'>
     <value>Range</value>
    </instance>
    <instance ref='constraintEntriesVH'>
    </instance>
   </item>
  </instance-selection>
  <instance ref='termTypeConstraintTemplateAssocVH'>
   <value>Atv03JffIeVVgsPZppyIx4mkGHC.template5</value>
  </instance>
 </instance>
</instantiation>