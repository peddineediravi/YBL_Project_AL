<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='DSG71szD5AH5G0pcZCfjmcoPvq0' name='NoDPD'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='nameVH'>
  <value>NoDPD</value>
 </instance>
 <instance ref='typeVH'>
  <value>boolean</value>
 </instance>
 <instance ref='descriptionVH'>
  <value></value>
 </instance>
 <instance ref='termPropertyVH'>
 </instance>
 <instance ref='isNeededEventRuleVH'>
  <instance ref='__ENTITY_PROPERTIES__VH__'>
  </instance>
  <instance ref='calculationVH'>
   <value><![CDATA[anApplicant is some Applicant;
YesBankAccountTypeAndObligations is a boolean initially false;
historyLength is an integer initially 0;
numberOfMonths is an integer initially 0;
paymentHistory is a string initially "";
noOfDPDBounces is an integer initially 0;
dpdFound is a boolean initially false;
YesBankAccountTypeObligationsAndDPD is a boolean initially false;
  
  for each Applicant in blazeMessage.request.application.applicants such that (it.applicantType is known) do
    {
      anApplicant = it;
	  //account type check
      for each BankDetails in anApplicant.bankDetails such that (it.accountType is (known and available)) do
        {
          if(it.accountType = (ignoring case)("Kisan Credit Card" or "36")) then
        
		//financierName check
       for each Liability in anApplicant.liabilities such that (it.financierName is (known and available) and (it.considerForObligations is(known and available)) )do
            {
               if(it.financierName=(ignoring case)("YESB" or "YES" or "YBL" or "532")) then 
         {
			 //obligations check
           if(it.considerForObligations = true and it.EMIAmount is (known and available)) then{
			   YesBankAccountTypeAndObligations = true;
             
           }
         }
			}                                      
        }
		
	//dpd calculation
if(anApplicant.multiBureauReport is known and anApplicant.multiBureauReport.cibilResponse is known and 
anApplicant.multiBureauReport.cibilResponse.accounts is known and anApplicant.multiBureauReport.cibilResponse.accounts.count > 0) then {
for each Account in anApplicant.multiBureauReport.cibilResponse.accounts do {
				
	   if(it.paymentHistory1 is (known and available)) then {
				paymentHistory = it.paymentHistory1;
			}
		if(it.paymentHistory2 is (known and available)) then {
			paymentHistory = paymentHistory.concat(it.paymentHistory2);
		}
		historyLength = paymentHistory.length();
		numberOfMonths = math().truncate(historyLength/3);
		paymentHistory = paymentHistory.replaceAll("X","0");
		paymentHistory = paymentHistory.replaceAll("DDD", "000");
		paymentHistory = paymentHistory.replaceAll("LSS", "180");
		paymentHistory = paymentHistory.replaceAll("SUB", "180");
		paymentHistory = paymentHistory.replaceAll("DBT", "180");
		paymentHistory = paymentHistory.replaceAll("SMA", "089");
		paymentHistory = paymentHistory.replaceAll("STD", "000");

		monthCounter is a integer initially 0;
		pos1 is an integer initially 0;
		pos2 is an integer initially 3;
		dpdValue is an integer initially 0;
		tempIntArray is some array of integer initially an array of integer;
		while(monthCounter <= numberOfMonths-1) do {
			dpdValue=paymentHistory.substring(pos1, pos2) as an integer;
			tempIntArray.append(dpdValue);
			pos1=pos2;
			pos2=pos2+3;
			monthCounter+=1;
		}
		dpdArrCount is an integer initially 0;
		if(tempIntArray.count > 0) then {
			while(dpdArrCount < (tempIntArray.count)) do{	
			if(tempIntArray[dpdArrCount] >= 0) then {
			noOfDPDBounces = noOfDPDBounces +1;
			}
			dpdArrCount = dpdArrCount +1;
		}
	}
	
}
}	
    }
	
	
if(noOfDPDBounces >0 ) then{
	
	dpdFound = true;
}
if(YesBankAccountTypeAndObligations = true and dpdFound = true) then{
	
	YesBankAccountTypeObligationsAndDPD =  true;
}
theFMABT.NoDPD=YesBankAccountTypeObligationsAndDPD ;

print("YesBankAccountTypeObligationsAndDPD =="YesBankAccountTypeObligationsAndDPD );

print("YesBankAccountTypeObligationsAndDPD::::::::::"YesBankAccountTypeObligationsAndDPD);
return YesBankAccountTypeObligationsAndDPD;]]></value>
  </instance>
 </instance>
 <instance ref='constraintContainerVH'>
  <instance-selection ref='constraintVH'>
   <item template='Atv03JffIeVVgsPZppyIx4mkGHC.template5' id='9xoe8M'>
    <instance ref='fromVH'>
     <value></value>
    </instance>
    <instance ref='toVH'>
     <value></value>
    </instance>
    <instance ref='constraintNameVH'>
     <value>Range</value>
    </instance>
    <instance ref='constraintEntriesVH'>
    </instance>
   </item>
  </instance-selection>
  <instance ref='termTypeConstraintTemplateAssocVH'>
   <value>Atv03JffIeVVgsPZppyIx4mkGHC.template5</value>
  </instance>
 </instance>
</instantiation>