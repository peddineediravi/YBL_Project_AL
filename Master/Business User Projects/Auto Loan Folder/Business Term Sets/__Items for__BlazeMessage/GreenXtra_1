<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='DSG71szD5AH5G0pcZCfjmcoPvq0' name='GreenXtra'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='nameVH'>
  <value>GreenXtra</value>
 </instance>
 <instance ref='typeVH'>
  <value>boolean</value>
 </instance>
 <instance ref='descriptionVH'>
  <value></value>
 </instance>
 <instance ref='termPropertyVH'>
 </instance>
 <instance ref='isNeededEventRuleVH'>
  <instance ref='__ENTITY_PROPERTIES__VH__'>
  </instance>
  <instance ref='calculationVH'>
   <value><![CDATA[theBlazeMessageBT.GreenXtra=false;
scorecondition is a boolean initially false;
priamaryApplicantIndividual is a boolean initially false;
 suitFilledWriteOffFlag is a boolean initially false;
 writtenOffAndSettledFlag is a boolean initially false;
 AdditionalRule2 is a boolean initially false;
anApplicant is some Applicant;
AppFilterDeviation is some array of Deviation initially an array of Deviation;
incomeNormsMet is a boolean initially false;
print("insideXTRAGREEN");

if(theBlazeMessageBT.termSetInput.request.application.specialTieup<>("103202101" and "1204202101" and  "40222012")
   and theBlazeMessageBT.termSetInput.request.application.loanDetails.loanAmount<=2500000
  and theBlazeMessageBT.termSetInput.request.application.schemeGroup<>("7" and "6" and "21") 
  and theBlazeMessageBT.scorecardtotalScore>=694 and theBlazeMessageBT.scorecardtotalScore<=700
  and theBlazeMessageBT.appLevelCibilScore>750 )then{
     scorecondition=true;
}
for each Applicant in theBlazeMessageBT.termSetInput.request.application.applicants such that (it.applicantType is known ) do{
	anApplicant =it;	
		if(it.applicantType="P"and it.constitution is (known and available) and it.constitution ="1" )then	{
   		priamaryApplicantIndividual =true
 }
}
for each Deviation in theBlazeMessageBT.termSetInput.response.applicationDecision.deviations such that (it is not null and it is known ) do {
     AppFilterDeviation.append(it);
}
for each Deviation in AppFilterDeviation do {
      if(it.reasonCode is known and (it.reasonCode = ( "40001" or "40002" or "40003") ) )then{
        incomeNormsMet =true;
      }
}
for each Applicant in theBlazeMessageBT.termSetInput.request.application.applicants such that (it.applicantType is known )do{
  anApplicant =it;
  if(anApplicant.multiBureauReport is known and anApplicant.multiBureauReport.cibilResponse is known and anApplicant.multiBureauReport.cibilResponse.accounts is known and
     anApplicant.multiBureauReport.cibilResponse.accounts.count > 0) then{
      for each Account in anApplicant.multiBureauReport.cibilResponse.accounts such that(it.suitFiledOrWilfulDefault is (known and available) and it.writtenOffAndSettled is (known and available))do{
      if(it.suitFiledOrWilfulDefault is not null and it.suitFiledOrWilfulDefault <>"") then {
             suitFilledWriteOffFlag=true;
        } if(it.writtenOffAndSettled >= 0)then{
              writtenOffAndSettledFlag = true;
        }   
    }
  } 

if(suitFilledWriteOffFlag=true or writtenOffAndSettledFlag =true)then{
	for each ScoreSegment in anApplicant.multiBureauReport.cibilResponse.scores such that(it.score>1)do{
  for each Score in theBlazeMessageBT.termSetInput.response.applicationDecision.scorecardResult such that (it.scorecardScore is known and it.scorecardScore >=701)do{
    AdditionalRule2=true;
  }
	}
}
}
 if(AdditionalRule2=false and  incomeNormsMet=false and priamaryApplicantIndividual=true and scorecondition=true )then{
   theBlazeMessageBT.GreenXtra=true;
 }
print("AdditionalRule2=="AdditionalRule2);
print("incomeNormsMet"incomeNormsMet);
print("priamaryApplicantIndividual"priamaryApplicantIndividual);
print("scorecondition"scorecondition);
print("theBlazeMessageBT.GreenXtra"theBlazeMessageBT.GreenXtra);
]]></value>
  </instance>
 </instance>
 <instance ref='constraintContainerVH'>
  <instance-selection ref='constraintVH'>
   <item template='Atv03JffIeVVgsPZppyIx4mkGHC.template5' id='QZQ69a'>
    <instance ref='fromVH'>
     <value></value>
    </instance>
    <instance ref='toVH'>
     <value></value>
    </instance>
    <instance ref='constraintNameVH'>
     <value>Range</value>
    </instance>
    <instance ref='constraintEntriesVH'>
    </instance>
   </item>
  </instance-selection>
  <instance ref='termTypeConstraintTemplateAssocVH'>
   <value>Atv03JffIeVVgsPZppyIx4mkGHC.template5</value>
  </instance>
 </instance>
</instantiation>