<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='DSG71szD5AH5G0pcZCfjmcoPvq0' name='actualLtv'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='nameVH'>
  <value>actualLtv</value>
 </instance>
 <instance ref='typeVH'>
  <value>real</value>
 </instance>
 <instance ref='descriptionVH'>
  <value></value>
 </instance>
 <instance ref='termPropertyVH'>
 </instance>
 <instance ref='isNeededEventRuleVH'>
  <instance ref='__ENTITY_PROPERTIES__VH__'>
  </instance>
  <instance ref='calculationVH'>
   <value><![CDATA[if(theBlazeMessageBT.termSetInput.invocation.lineOfBusiness="AL" and theBlazeMessageBT.termSetInput.request.application.product<>"UCL") then {  
	if(theBlazeMessageBT.termSetInput.request.application.loanDetails is known and theBlazeMessageBT.termSetInput.request.application.assetDetails.newVehicleDetails is known
  	and theBlazeMessageBT.termSetInput.request.application.assetDetails.newVehicleDetails.totalCashPrice is known and
  		theBlazeMessageBT.termSetInput.request.application.assetDetails.detailAssetLoan.insuranceAmt is known) then{
    		actualLtv =  theBlazeMessageBT.InsuredLoanAmount/(theBlazeMessageBT.termSetInput.request.application.assetDetails.newVehicleDetails.totalCashPrice-theBlazeMessageBT.termSetInput.request.application.assetDetails.detailAssetLoan.insuranceAmt);
    			actualLtv = actualLtv*100;
    			roundingUpto is an integer initially -2;
  			  	actualLtv = math().round(actualLtv, roundingUpto);
   	 }  else{
    			actualLtv=0;
  			}
	}
     if(theBlazeMessageBT.termSetInput.request.application.product="UCL") then {  
     	 assetcost is a real initially 0;
			if(theBlazeMessageBT.termSetInput.request.application.assetDetails.newVehicleDetails.totalCashPrice is known)then{
       		assetcost=theBlazeMessageBT.termSetInput.request.application.assetDetails.newVehicleDetails.totalCashPrice;
		}  else  {
           assetcost=0;
         }
			print("assetcostLTV=="assetcost);
			 if(theBlazeMessageBT.termSetInput.request.application.loanDetails is known and
        		theBlazeMessageBT.termSetInput.request.application.assetDetails.usedVehicleDetails is known) then{
			  	if(assetcost>0 and theBlazeMessageBT.termSetInput.request.application.assetDetails.detailAssetLoan.insuranceAmt is known)then{ 
				actualLtv= theBlazeMessageBT.InsuredLoanAmount/(assetcost-theBlazeMessageBT.termSetInput.request.application.assetDetails.detailAssetLoan.insuranceAmt);
    		    actualLtv = actualLtv*100;
               roundingUpto is an integer initially -2;
  			  actualLtv = math().round(actualLtv, roundingUpto);
       }    else actualLtv=0;
  			}
  }
     if(theBlazeMessageBT.termSetInput.request.application.product="FMA") then {  
       print("insideFMA");
  assetvalue is a real initially 0;
       if(theBlazeMessageBT.termSetInput.request.application.assetDetails.newVehicleDetails.netDealerPrice is (known and available) and theBlazeMessageBT.termSetInput.request.application.assetDetails.newVehicleDetails.assetCost is (known and available))then{
       assetvalue=math().min(theBlazeMessageBT.termSetInput.request.application.assetDetails.newVehicleDetails.netDealerPrice, theBlazeMessageBT.termSetInput.request.application.assetDetails.newVehicleDetails.assetCost);
   				actualLtv =  theBlazeMessageBT.InsuredLoanAmount/assetvalue;
    			actualLtv = actualLtv*100;
    			roundingUpto is an integer initially -2;
  			  	actualLtv = math().round(actualLtv, roundingUpto);
         print("FMALTV=="actualLtv);
   	 }  else{
    			actualLtv=0;
  			}
     }
print("ActualLTV=="theBlazeMessageBT.actualLtv);]]></value>
  </instance>
 </instance>
 <instance ref='constraintContainerVH'>
  <instance-selection ref='constraintVH'>
   <item template='Atv03JffIeVVgsPZppyIx4mkGHC.template5' id='5FrlxI'>
    <instance ref='fromVH'>
     <value></value>
    </instance>
    <instance ref='toVH'>
     <value></value>
    </instance>
    <instance ref='constraintNameVH'>
     <value>Range</value>
    </instance>
    <instance ref='constraintEntriesVH'>
    </instance>
   </item>
  </instance-selection>
  <instance ref='termTypeConstraintTemplateAssocVH'>
   <value>Atv03JffIeVVgsPZppyIx4mkGHC.template5</value>
  </instance>
 </instance>
</instantiation>