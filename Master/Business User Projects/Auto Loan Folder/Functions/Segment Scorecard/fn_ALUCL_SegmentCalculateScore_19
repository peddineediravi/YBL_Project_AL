<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_ALUCL_SegmentCalculateScore'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_ALUCL_SegmentCalculateScore</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>BlazeMessage</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[response is some Response initially a Response;
//blazeMessage.response = response;
appDecision is some Decision initially a Decision;
//blazeMessage.response.applicationDecision = appDecision;
blazeMessage.charNameToCharVal = an association from string to string;
charMap is an association from string to string;
segmentScore is an real initially 0.0; 
segmentScore =fn_segmentParam(financialApplicant);
print("segmentScore=="segmentScore);
//anApplicant is some Applicant;

returnInfo is some NdScoreModelReturnInfo initially a NdScoreModelReturnInfo;

ageDiffforScorecard is a real initially 0.0;  
if(financialApplicant is (known and available)) then {  
    if(financialApplicant.dateOfBirth is (known and available))then{
        ageDiffforScorecard=(calendar().currentDate().subtractInDays(financialApplicant.dateOfBirth).days);
    }
}
	ageDiffforScorecard = ageDiffforScorecard / 366;
	print("ageDiffforScorecard" ageDiffforScorecard);
	
if(blazeMessage.request.application.product  is (known and available) and  blazeMessage.request.application.product  =("UCL"))then {
	//UCL Segment 1 Initialization
	NoOfDedupedFinanceInqInPast6Months_g405s is a real initially 0.0;
	NoOfDedupedBankInqInPast6Months_g409s  is a real initially 0.0;
	UtilizationForOpenCreditCardTradesVerifiedInPast12Months_bc34s  is a real initially 0.0;
	UCL_Seg1_AvgNoOfMonthsTradesHaveBeenOnFile_s004s  is a real initially 0.0;
	PercentageOfAccountsEverDelinquent_cv13  is a real initially 0.0;
	UtilizationForOpenInstallmentTradesVerifiedInPast12Months_in34s  is a real initially 0.0;
	segment1_Age  is a real initially 0.0;
	MaxBureauVintageForCC_VINTAGE_CC  is a real initially 0.0;
	
	//UCL Segment 2 Initialization
	noOfDedupedFinanceInqInPast12Months_g406s is a real initially 0.0;
	noOfDedupedAutoInqInPast12Months_g414s  is a real initially 0.0;
	seg2_utilizationForOpenCreditCardTradesVerifiedInPast12Months_bc34s  is a real initially 0.0;
	noOfCurrentlyOpenAndSatisfactoryTrades24MonthsOrOlder_at27s is a real initially 0.0;
	worstRatingOnInstallmentTrades_g305s  is a real initially 0.0;
	noOfMissedPaymentsInLast3Mnths_paymnt71  is a real initially 0.0;
	utilizationForOpenTradesVerifiedInPast12Mnths_at34a  is a real initially 0.0;
	seg2_avgNoOfMonthsTradesHaveBeenOnFile_s004s  is a real initially 0.0;
	percentageOfAcctsEverDelinquent_cv13  is a real initially 0.0;
	maximumBureauVintageAcrossAllProducts_INTAGE_ALL  is a real  initially 0.0;
	
	//UCL Segment 1 Scorecard Calling
	if(segmentScore is (known and available) and (segmentScore>=12) and segmentScore<60  )then {
		NoOfDedupedFinanceInqInPast6Months_g405s = fn_NoOfDedupedFinanceInqInPast6Months_g405s(financialApplicant);
		NoOfDedupedBankInqInPast6Months_g409s = fn_NoOfDedupedBankInqInPast6Months_g409s(financialApplicant);
		UtilizationForOpenCreditCardTradesVerifiedInPast12Months_bc34s =fn_UtilizationForOpenCreditCardTradesVerifiedInPast12Months_bc34s(financialApplicant);
		UCL_Seg1_AvgNoOfMonthsTradesHaveBeenOnFile_s004s =fn_UCL_Seg1AvgNoOfMonthsTradesHaveBeenOnFile_s004s(financialApplicant);
		PercentageOfAccountsEverDelinquent_cv13 =fn_PercentageOfAccountsEverDelinquent_cv13(financialApplicant);
		UtilizationForOpenInstallmentTradesVerifiedInPast12Months_in34s=fn_UtilizationForOpeninstallmentTradesVerifiedInPast12Months_in34s(financialApplicant);
		segment1_Age =fn_segment1_Age(financialApplicant);
		MaxBureauVintageForCC_VINTAGE_CC = fn_MaximumBureauVintageForCC_VINTAGE_CC(financialApplicant);
      
      blazeMessage.charNameToCharVal["NoOfDedupedFinanceInqInPast6Months_g405s"] = NoOfDedupedFinanceInqInPast6Months_g405s as a string; 
       blazeMessage.charNameToCharVal["NoOfDedupedBankInqInPast6Months_g409s"] = NoOfDedupedBankInqInPast6Months_g409s as a string;
       blazeMessage.charNameToCharVal["UtilizationForOpenCreditCardTradesVerifiedInPast12Months_bc34s"] = UtilizationForOpenCreditCardTradesVerifiedInPast12Months_bc34s  as a string;
       blazeMessage.charNameToCharVal["AvgNoOfMonthsTradesHaveBeenOnFile_s004s"] = UCL_Seg1_AvgNoOfMonthsTradesHaveBeenOnFile_s004s  as a string;
       blazeMessage.charNameToCharVal["PercentageOfAccountsEverDelinquent_cv13"] = PercentageOfAccountsEverDelinquent_cv13  as a string;
       blazeMessage.charNameToCharVal["UtilizationForOpenInstallmentTradesVerifiedInPast12Months_in34s"] = UtilizationForOpenInstallmentTradesVerifiedInPast12Months_in34s  as a string;
       blazeMessage.charNameToCharVal["segment1_Age"] = segment1_Age  as a string;
      blazeMessage.charNameToCharVal["MaxBureauVintageForCC_VINTAGE_CC"] = MaxBureauVintageForCC_VINTAGE_CC  as a string;

      print(" 1 ="NoOfDedupedFinanceInqInPast6Months_g405s "2=" NoOfDedupedBankInqInPast6Months_g409s",3= "UtilizationForOpenCreditCardTradesVerifiedInPast12Months_bc34s",4= "UCL_Seg1_AvgNoOfMonthsTradesHaveBeenOnFile_s004s", 5="PercentageOfAccountsEverDelinquent_cv13"6=, "UtilizationForOpenInstallmentTradesVerifiedInPast12Months_in34s"7=, "segment1_Age"8= "MaxBureauVintageForCC_VINTAGE_CC);
	   
	   if(ageDiffforScorecard <=65)then { 
			returnInfo = UCL_Segment1_ScoreCard(NoOfDedupedFinanceInqInPast6Months_g405s, NoOfDedupedBankInqInPast6Months_g409s, UtilizationForOpenCreditCardTradesVerifiedInPast12Months_bc34s, UCL_Seg1_AvgNoOfMonthsTradesHaveBeenOnFile_s004s, PercentageOfAccountsEverDelinquent_cv13, UtilizationForOpenInstallmentTradesVerifiedInPast12Months_in34s, segment1_Age, MaxBureauVintageForCC_VINTAGE_CC);
	   }
	}
	//UCL Segment 2 Scorecard Calling
	else if(segmentScore is (known and available) and segmentScore >= 60  )then {
		noOfDedupedFinanceInqInPast12Months_g406s =fn_NoOfDedupedFinanceInqInPast12Mnths_g406s(financialApplicant) ;
		noOfDedupedAutoInqInPast12Months_g414s = fn_NoOfDedupedAutoInqInPast12Mnths_g414s(financialApplicant);
		seg2_utilizationForOpenCreditCardTradesVerifiedInPast12Months_bc34s = fn_Seg2_UtilizationForOpenCreditCardTradesVerifiedInPast12Mnths_bc34s(financialApplicant);
		noOfCurrentlyOpenAndSatisfactoryTrades24MonthsOrOlder_at27s =fn_NoOfCurrentlyOpenandSatisfactoryTrades24Monthsorolder_at27s(financialApplicant);
		worstRatingOnInstallmentTrades_g305s =fn_WorstRatingOnInstallmentTrades_g305s(financialApplicant);
		noOfMissedPaymentsInLast3Mnths_paymnt71 =fn_NoOfMissedPaymentsInLast3Mnths_paymnt71(financialApplicant);
		utilizationForOpenTradesVerifiedInPast12Mnths_at34a =fn_UtilizationForOpenTradesVerifiedInPast12Months_at34a(financialApplicant);
		seg2_avgNoOfMonthsTradesHaveBeenOnFile_s004s =fn_Seg2_AvegNoOfMonthsTradesHaveBeenOnFile_s004s(financialApplicant);
		percentageOfAcctsEverDelinquent_cv13 =fn_PercentageOfAccountsEverDelinquent_cv131(financialApplicant);
		maximumBureauVintageAcrossAllProducts_INTAGE_ALL =fn_MaxBureauVintageAcrossAllProducts_VINTAGE_ALL(financialApplicant);
      
      blazeMessage.charNameToCharVal["noOfDedupedFinanceInqInPast12Months_g406s"] = noOfDedupedFinanceInqInPast12Months_g406s as a string;
      blazeMessage.charNameToCharVal["noOfDedupedAutoInqInPast12Months_g414s"] = noOfDedupedAutoInqInPast12Months_g414s as a string;
      blazeMessage.charNameToCharVal["utilizationForOpenCreditCardTradesVerifiedInPast12Months_bc34s"] = seg2_utilizationForOpenCreditCardTradesVerifiedInPast12Months_bc34s  as a string;
      blazeMessage.charNameToCharVal["noOfCurrentlyOpenAndSatisfactoryTrades24MonthsOrOlder_at27s"] = noOfCurrentlyOpenAndSatisfactoryTrades24MonthsOrOlder_at27s  as a string;
      blazeMessage.charNameToCharVal["worstRatingOnInstallmentTrades_g305s"] = worstRatingOnInstallmentTrades_g305s  as a string;
      blazeMessage.charNameToCharVal["noOfMissedPaymentsInLast3Mnths_paymnt71"] = noOfMissedPaymentsInLast3Mnths_paymnt71  as a string;
      blazeMessage.charNameToCharVal["utilizationForOpenTradesVerifiedInPast12Mnths_at34a"] = utilizationForOpenTradesVerifiedInPast12Mnths_at34a  as a string;
      blazeMessage.charNameToCharVal["avgNoOfMonthsTradesHaveBeenOnFile_s004s"] = seg2_avgNoOfMonthsTradesHaveBeenOnFile_s004s  as a string;
      blazeMessage.charNameToCharVal["percentageOfAcctsEverDelinquent_cv13"] = percentageOfAcctsEverDelinquent_cv13  as a string;
      blazeMessage.charNameToCharVal["maximumBureauVintageAcrossAllProducts_INTAGE_ALL"] = maximumBureauVintageAcrossAllProducts_INTAGE_ALL as a string;
  
		print("1 ="noOfDedupedFinanceInqInPast12Months_g406s"2 "noOfDedupedAutoInqInPast12Months_g414s";3"seg2_utilizationForOpenCreditCardTradesVerifiedInPast12Months_bc34s",4" noOfCurrentlyOpenAndSatisfactoryTrades24MonthsOrOlder_at27s",5 "worstRatingOnInstallmentTrades_g305s",6 "noOfMissedPaymentsInLast3Mnths_paymnt71",7 "utilizationForOpenTradesVerifiedInPast12Mnths_at34a"8="seg2_avgNoOfMonthsTradesHaveBeenOnFile_s004s",9 "percentageOfAcctsEverDelinquent_cv13"10" maximumBureauVintageAcrossAllProducts_INTAGE_ALL);
		
		if(ageDiffforScorecard <=65)then { 
			returnInfo = UCL_Segment2_ScoreCard(noOfDedupedFinanceInqInPast12Months_g406s, noOfDedupedAutoInqInPast12Months_g414s, seg2_utilizationForOpenCreditCardTradesVerifiedInPast12Months_bc34s, noOfCurrentlyOpenAndSatisfactoryTrades24MonthsOrOlder_at27s, worstRatingOnInstallmentTrades_g305s, noOfMissedPaymentsInLast3Mnths_paymnt71, utilizationForOpenTradesVerifiedInPast12Mnths_at34a, seg2_avgNoOfMonthsTradesHaveBeenOnFile_s004s, percentageOfAcctsEverDelinquent_cv13, maximumBureauVintageAcrossAllProducts_INTAGE_ALL);
		}
	}
}
else if (blazeMessage.request.application.product  is (known and available) and  blazeMessage.request.application.product  =("ALN" or "AL")) then {
	//ALN segment1 Initialization
	noOfDedupedFinanceInquiries_g407s  is a real initially 0.0;
	monthsSinceMostRecentFinanceInstallmentTradeOpened_fi21s  is a real initially 0.0;
	seg1utilizationOfOpenTradesVerifiedInPast12Months_at34b  is a real initially 0.0;
	noOfMissedPaymentsInLast12MonthsForFinancialTrades_payment58  is a real initially 0.0;
	noOfOpenInstallmentTrades_in02s  is a real initially 0.0;
	worstRatingOnInstallmentTradesInPast12Months_g304s  is a real initially 0.0;
	noOfDedupedAutoInquriesInPast12Months_g414s  is a real initially 0.0;
	
	//ALN segment2 Initialization
	worstRatingOnInstallmentTrades_g305s1 is a real initially 0.0;
	noOfDedupedInquiriesInPast6Moths_g980s  is a real initially 0.0;
	utilizationOfOpenTradesVerifiedInPast12Months_at34b1  is a real initially 0.0;
	ALN_Seg2_PercentageOfTradesEverDelinquent_g051s  is a real initially 0.0;
	averageNoOfMonthsTradesHaveBeenOnFile_s004s  is a real initially 0.0;
	ALN_noOfCurrentlyOpenAndSatisfactoryTrades24MonthsOrOlder_at27s  is a real initially 0.0;
	noOfDedupedAutoInquiriesInPast12Months_g414s  is a real initially 0.0;
	monthsSinceOldestCreditCardTradeOpened_bc20s  is a real initially 0.0;
	//ALN segment1 Calling
	if(segmentScore is (known and available) and (segmentScore>=12) and  (segmentScore<36) ) then {
		noOfDedupedFinanceInquiries_g407s =fn_NoOfDedupedFinanceInquiries_g407s(financialApplicant);
		monthsSinceMostRecentFinanceInstallmentTradeOpened_fi21s=fn_MonthsSinceMostRecentFinanceInstallmentTradeOpened_fi21s(financialApplicant);
		seg1utilizationOfOpenTradesVerifiedInPast12Months_at34b=fn_Seg1_UtilizationOfOpenTradesVerifiedInPast12Months_at34b(financialApplicant);
		noOfMissedPaymentsInLast12MonthsForFinancialTrades_payment58=fn_NoOfMissedPaymentsInLast12MonthsForFinancialTrades_payment58(financialApplicant);
		noOfOpenInstallmentTrades_in02s=fn_NoOfOpenInstallmentTrades_in02s(financialApplicant);
		worstRatingOnInstallmentTradesInPast12Months_g304s=fn_WorstRatingOnInstallmentTradesInPast12Months_g304s(financialApplicant);
		noOfDedupedAutoInquriesInPast12Months_g414s=fn_NoOfDedupedAutoInquriesInPast12Months_g414s(financialApplicant);
		
      blazeMessage.charNameToCharVal["noOfDedupedFinanceInquiries_g407s"] = noOfDedupedFinanceInquiries_g407s as a string;
      blazeMessage.charNameToCharVal["monthsSinceMostRecentFinanceInstallmentTradeOpened_fi21s"] = monthsSinceMostRecentFinanceInstallmentTradeOpened_fi21s as a string;
      blazeMessage.charNameToCharVal["utilizationOfOpenTradesVerifiedInPast12Months_at34b"] = seg1utilizationOfOpenTradesVerifiedInPast12Months_at34b as a string;
      blazeMessage.charNameToCharVal["noOfMissedPaymentsInLast12MonthsForFinancialTrades_payment58"] = noOfMissedPaymentsInLast12MonthsForFinancialTrades_payment58 as a string;
      blazeMessage.charNameToCharVal["noOfOpenInstallmentTrades_in02s"] = noOfOpenInstallmentTrades_in02s as a string;
      blazeMessage.charNameToCharVal["worstRatingOnInstallmentTradesInPast12Months_g304s"] = worstRatingOnInstallmentTradesInPast12Months_g304s as a string;
      blazeMessage.charNameToCharVal["noOfDedupedAutoInquriesInPast12Months_g414s"] = noOfDedupedAutoInquriesInPast12Months_g414s as a string;
		
		returnInfo=ALN_Segment1_ScoreCard(noOfDedupedFinanceInquiries_g407s, monthsSinceMostRecentFinanceInstallmentTradeOpened_fi21s, seg1utilizationOfOpenTradesVerifiedInPast12Months_at34b, noOfMissedPaymentsInLast12MonthsForFinancialTrades_payment58, noOfOpenInstallmentTrades_in02s, worstRatingOnInstallmentTradesInPast12Months_g304s, noOfDedupedAutoInquriesInPast12Months_g414s);
	}
	//ALN segment2 Calling
	else if(segmentScore is (known and available) and (segmentScore>=36) ) then {
		worstRatingOnInstallmentTrades_g305s1=fn_WorstRatingOnInstallmentTrades_g305s1(financialApplicant);
		noOfDedupedInquiriesInPast6Moths_g980s=fn_NoOfDedupedInquiriesInPast6Moths_g980s(financialApplicant);
		utilizationOfOpenTradesVerifiedInPast12Months_at34b1=fn_UtilizationOfOpenTradesVerifiedInPast12Months_at34b1(financialApplicant);
		ALN_Seg2_PercentageOfTradesEverDelinquent_g051s=fn_ALN_Seg2_PercentageOfTradesEverDelinquent_g051s(financialApplicant);
		averageNoOfMonthsTradesHaveBeenOnFile_s004s=fn_AverageNoOfMonthsTradesHaveBeenOnFile_s004s(financialApplicant);
		ALN_noOfCurrentlyOpenAndSatisfactoryTrades24MonthsOrOlder_at27s=fn_ALS2NoOfCurrentlyOpenAndSatisfactoryTrades24MonthsOrOlder_at27s(financialApplicant);
		noOfDedupedAutoInquiriesInPast12Months_g414s=fn_NoOfDedupedAutoInquiriesInPast12Months_g414s(financialApplicant);
		monthsSinceOldestCreditCardTradeOpened_bc20s=fn_MonthsSinceOldestCreditCardTradeOpened_bc20s(financialApplicant);
      
        blazeMessage.charNameToCharVal["worstRatingOnInstallmentTrades_g305s1"] = worstRatingOnInstallmentTrades_g305s1 as a string;      
        blazeMessage.charNameToCharVal["noOfDedupedInquiriesInPast6Moths_g980s"] = noOfDedupedInquiriesInPast6Moths_g980s as a string;
        blazeMessage.charNameToCharVal["utilizationOfOpenTradesVerifiedInPast12Months_at34b1"] = utilizationOfOpenTradesVerifiedInPast12Months_at34b1 as a string;
        blazeMessage.charNameToCharVal["percentageOfTradesEverDelinquent_g051s"] = ALN_Seg2_PercentageOfTradesEverDelinquent_g051s as a string;
        blazeMessage.charNameToCharVal["averageNoOfMonthsTradesHaveBeenOnFile_s004s"] = averageNoOfMonthsTradesHaveBeenOnFile_s004s as a string;
        blazeMessage.charNameToCharVal["noOfCurrentlyOpenAndSatisfactoryTrades24MonthsOrOlder_at27s"] = ALN_noOfCurrentlyOpenAndSatisfactoryTrades24MonthsOrOlder_at27s as a string;
        blazeMessage.charNameToCharVal["noOfDedupedAutoInquiriesInPast12Months_g414s"] = noOfDedupedAutoInquiriesInPast12Months_g414s as a string;
        blazeMessage.charNameToCharVal["monthsSinceOldestCreditCardTradeOpened_bc20s"] = monthsSinceOldestCreditCardTradeOpened_bc20s as a string;
      
		returnInfo=ALN_Segment2_ScoreCard(worstRatingOnInstallmentTrades_g305s1, noOfDedupedInquiriesInPast6Moths_g980s, utilizationOfOpenTradesVerifiedInPast12Months_at34b1, ALN_Seg2_PercentageOfTradesEverDelinquent_g051s, averageNoOfMonthsTradesHaveBeenOnFile_s004s, ALN_noOfCurrentlyOpenAndSatisfactoryTrades24MonthsOrOlder_at27s, noOfDedupedAutoInquiriesInPast12Months_g414s, monthsSinceOldestCreditCardTradeOpened_bc20s);
	}
}

scoredCharacteristics is some array of ScoreDetail initially an array of ScoreDetail;
score is some Score initially a Score;
if returnInfo.scoredCharacteristics is not  null then {
  		for each NdScoredCharacteristic in returnInfo.scoredCharacteristics do {
			characteristic is some ScoreDetail initially a ScoreDetail;
			if(it.binLabel is known) then
				characteristic.binLabel = it.binLabel;
			if(it.characteristicName is known) then
				characteristic.characteristicName = it.characteristicName;
				
			if(it.partialScore is known) then 
				characteristic.partialScore = it.partialScore;
				
          characteristic.characteristicValue = blazeMessage.charNameToCharVal[it.characteristicName];
          scoredCharacteristics.append(characteristic);
		}
score.scorecardScore = returnInfo.score;
score.scoredCharacteristics = scoredCharacteristics;
score.characteristicCount= score.scoredCharacteristics.count;

if (blazeMessage.request.application.product  is (known and available) and  blazeMessage.request.application.product  =("ALN" or "AL")) then {
	if(segmentScore is (known and available) and (segmentScore>=12) and (segmentScore<36))then{
		score.scorecardName="ALN_Segement1";
		theBlazeMessageBT.ALN_Segment2ScoreName = score.scorecardName;
		theBlazeMessageBT.Segment1ScoreCardScore=score.scorecardScore;
		print("Segment1ScoreCardScore===="theBlazeMessageBT.Segment1ScoreCardScore);

	} 
	else if(segmentScore is (known and available) and segmentScore>=36)then{
		score.scorecardName="ALN_Segement2";
		theBlazeMessageBT.ALN_Segment2ScoreName = score.scorecardName;
		theBlazeMessageBT.Segment2ScoreCardScore=score.scorecardScore;
		print("Segment2ScoreCardScore===="theBlazeMessageBT.Segment2ScoreCardScore);
		print("scorecardName======="score.scorecardName);
	}
}
else if(blazeMessage.request.application.product  is (known and available) and  blazeMessage.request.application.product  =("UCL"))then {
	if(segmentScore is (known and available) and (segmentScore>=12 and segmentScore<60) and ageDiffforScorecard <=65) then { 
		score.scorecardName="Segement1";
		theBlazeMessageBT.UCLSegment1ScoreCardScore=score.scorecardScore;
		print("UCLSegment1ScoreCardScore===="theBlazeMessageBT.UCLSegment1ScoreCardScore);
	} 
	else if(segmentScore is (known and available) and segmentScore>=60 and ageDiffforScorecard <=65) then {
		score.scorecardName="Segement2";
		theBlazeMessageBT.UCLSegment2ScoreCardScore=score.scorecardScore;
		print("UCLSegment2ScoreCardScore===="theBlazeMessageBT.UCLSegment2ScoreCardScore);
	}
}
blazeMessage.response.applicationDecision.scorecardResult.append(score);
}

return blazeMessage;	]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='F4IFdx'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='OVzPjT'>
    <instance ref='ParameterNameVH'>
     <value>financialApplicant</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>Applicant</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>