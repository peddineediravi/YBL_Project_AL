<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_determineFinancialApplicant'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_determineFinancialApplicant</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>Applicant</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("Entering: fn_determineFinancialApplicant");
financialApplicant is some Applicant initially an Applicant;
higherAnnualIncome is some ConsolidatedIncome initially a ConsolidatedIncome;
higherAnnualIncome.totalIncome = 0.0;
anyoneApplicanthasIncome is a boolean initially false;
anApplicant is some Applicant initially an Applicant;
rePaymentAccountFlag is a boolean initially false;

for each Applicant in blazeMessage.request.application.applicants such that (it is (known and available) and it.applicantType is equal to (ignoring case ) ("P" or "C")) do {
  if(it.annualIncome.totalIncome is (known and available) and it.annualIncome.totalIncome > higherAnnualIncome.totalIncome) then {
    set anyoneApplicanthasIncome to true;
   higherAnnualIncome.totalIncome =  it.annualIncome.totalIncome;
   financialApplicant = it;
  }  
}
print("anyoneApplicanthasIncome: "anyoneApplicanthasIncome);

if(not(anyoneApplicanthasIncome)) then {
  for each Applicant in blazeMessage.request.application.applicants such that (it is (known and available) and it.applicantType is equal to (ignoring case ) ("P" or "C")) do {
  //write logic to check repayment flag
    anApplicant = it;
    for each BankDetails in anApplicant.bankDetails such that (anApplicant.bankDetails is (known and available)) do {
      if(it.isRepaymentAccount) then {
        set rePaymentAccountFlag to true;
        financialApplicant = anApplicant;
        print("financialApplicant: "financialApplicant);
      }
    }
  }
}
print("rePaymentAccountFlag: "rePaymentAccountFlag);
print("CustomerId - Higer Income Applicant/Applicant has Repayment Account: " financialApplicant.customerID);
if(financialApplicant.annualIncome.totalIncome is (known and available)) then {
print("Income of Financial Applicant: " financialApplicant.annualIncome.totalIncome);
} 
print("Exiting: fn_determineFinancialApplicant");
return financialApplicant;
]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='A1iF9T'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>