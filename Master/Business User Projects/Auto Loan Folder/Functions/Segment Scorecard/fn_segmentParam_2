<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_segmentParam'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_segmentParam</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>real</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("fn_segmentParam Entering ");
segmentParam is a real initially 0.0;
anApplicant is some Applicant;
todayDate is a date initially calendar().currentDate();
mobMonths is a real initially 0.0;
mobList is some array of real initially an array of real ;
for each Applicant in blazeMessage.request.application.applicants such that(it.applicantType is (known and available) and it.applicantType="P") do {
anApplicant =it; 
		if(anApplicant.multiBureauReport is known and anApplicant.multiBureauReport.cibilResponse is (known and available) and anApplicant.multiBureauReport.cibilResponse.accounts is (known and available) and anApplicant.multiBureauReport.cibilResponse.accounts.count > 0) then {
			for each Account in anApplicant.multiBureauReport.cibilResponse.accounts do { 
			  if(it.owenershipIndicator is (known and available) and it.owenershipIndicator is not equal to (ignoring case) "GUARANTOR" )then{
              if(todayDate is (known and available) and it.dateOpenedOrDisbursed is (known and available) )then{
                todayDate = anApplicant.multiBureauReport.cibilResponse.scores[0].scoreDate;
                print("todayDate::" todayDate);
                      //subtractInDays(it.dateOpenedOrDisbursed).days);
                mobMonths =todayDate.subtractInDays(it.dateOpenedOrDisbursed).days/30;
				mobList.append(mobMonths);
              }
			  }
            }
        }
}
print("mobList.max"mobList.max);
if( mobList is (known and available) and mobList.count>0 )then{
			segmentParam	= mobList.max;
}
return segmentParam; ]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='BvPlIS'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>