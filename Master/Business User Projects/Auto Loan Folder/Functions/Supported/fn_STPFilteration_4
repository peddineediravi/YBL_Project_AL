<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_STPFilteration'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_STPFilteration</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[AppFilterDeviation is some array of Deviation initially an array of Deviation;
STPFilterDeviation is some array of Deviation initially an array of Deviation;
isCibilWaved is a boolean initially false;

for each Deviation in blazeMessage.response.applicationDecision.deviations such that (it is not null and it is known) do {
  AppFilterDeviation.append(it);
}

for each Deviation in AppFilterDeviation do {
  
  
  if(it.ruleID is known and it.ruleID ="STP005")then{
        // STPFilterDeviation.removed();
    	isCibilWaved =true;
        print("cibil rules is there");
        }
if(it.ruleID is known and it.ruleID ="STP007")then{
	if at least 1 Score in blazeMessage.response.applicationDecision.scorecardResult  satisfy (it.scorecardScore is known and it.scorecardScore >= 701)then{
  	it.scorecardScore =700;
	}else   if at least 1 Score in blazeMessage.response.applicationDecision.scorecardResult  satisfy (it.scorecardScore is known and it.scorecardScore > 662 and it.scorecardScore < 701 )then{
  	it.scorecardScore;
	}
	
	 print("it.ruleID"it.ruleID);
}
}
if(isCibilWaved=true)then{
	for each Deviation in AppFilterDeviation do {
		if(it.ruleID is known and it.ruleID <> ("CIBIL001" and "CIBIL002" and "CIBIL030" and "CIBIL031"))then{
			STPFilterDeviation.append(it);
		}
	}
}
	
  if STPFilterDeviation.count = 0 then {
    blazeMessage.response.applicationDecision.deviations = AppFilterDeviation as a array of Deviation;
  }
  else if STPFilterDeviation.count > 0 then {
    blazeMessage.response.applicationDecision.deviations = STPFilterDeviation as a array of Deviation;
  }]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='SPhiHA'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>