<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_STPextra_Rules'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_STPextra_Rules</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("Entering STP Extra Rules:::::");
score is some Score ;
score = blazeMessage.response.applicationDecision.scorecardResult[0];
print("score"score);
anApplicant is some Applicant;  
yesCustomer is a boolean initially false;
existingCust is a boolean initially false;
liabilityBankName is a boolean initially false;
noOfDPDs is a integer initially 0;

////////////STP Extra Rules/////////////
for each Applicant in blazeMessage.request.application.applicants such that (it.applicantType is known )do{
	anApplicant =it;
	print("inside fun");
	if(anApplicant.bankDetails  is known ) then
	{
      print("inside bank");
		for each BankDetails in anApplicant.bankDetails such that (it.bankName is known) do
		{
	 		if(at least 1 BankDetails in anApplicant.bankDetails satisfies(it.bankName is equal to ("YESB" or "YES" or "YBL" or "532" )))then
			{
				yesCustomer=true;
				print("yesCustomer:::"yesCustomer);
			}
		}
	}
	
	if(anApplicant.existingCustomer is (known and available) and anApplicant.existingCustomer is equal to (ignoring case)("yes" or "Y"))then{
		existingCust=true;
		print("existingCust:::"existingCust);
	}
	
	if (at least 1 Liability in anApplicant.liabilities satisfies (it.financierName is (known and available) and 
		it.financierName is equal to (ignoring case)"532")) then { 
		liabilityBankName=true;
		print("liabilityBankName:::"liabilityBankName);
	}
}

	if(score.scorecardScore is known and score.scorecardScore <=662 and  (yesCustomer=true or existingCust=true or liabilityBankName=true))then{		
			print("scorecardScore:::"score.scorecardScore);
		  score.scorecardScore =700;         
		}	
	
	
	noOfDPDs=fn_30PlusDPDInLast24Months(blazeMessage,24);
	print("noOfDPDs:::"noOfDPDs);
for each Applicant in blazeMessage.request.application.applicants such that (it.applicantType is known )do{
	anApplicant =it;
  print("inside cibil");
 // blazeMessage.request.application.applicants[0].multiBureauReport.cibilResponse.scores;
  if(it.multiBureauReport is (known and available)  and  anApplicant.multiBureauReport.cibilResponse is (known and available) and it.multiBureauReport.cibilResponse.scores  is (known and available)  )then{
  for each ScoreSegment in anApplicant.multiBureauReport.cibilResponse.scores such that (it.score is known and it.score>1)do{
    print("cibilscore=="it.score);
    print("scorecardScore:::"blazeMessage.response.applicationDecision.scorecardResult[0].scorecardScore);
	if(blazeMessage.response.applicationDecision.scorecardResult[0].scorecardScore is known and blazeMessage.response.applicationDecision.scorecardResult[0].scorecardScore <=662.00 and noOfDPDs<1)then{
          print("scorecardScore:::"blazeMessage.response.applicationDecision.scorecardResult[0].scorecardScore);
		  blazeMessage.response.applicationDecision.scorecardResult[0].scorecardScore =700;
    }
    else {
      blazeMessage.response.applicationDecision.scorecardResult[0].scorecardScore=blazeMessage.response.applicationDecision.scorecardResult[0].scorecardScore;
         }
	}
}
}
]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='ZTMzF2'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>