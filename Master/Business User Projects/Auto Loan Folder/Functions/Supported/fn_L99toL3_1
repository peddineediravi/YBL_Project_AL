<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_L99toL3'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_L99toL3</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("printing ExtraL99 to L3");
KERLANIP is a boolean initially false;
BankingMax is a boolean initially false;
anDeviation is some Deviation initially an Deviation;
tempArray is some array of string initially an array of string;
AppFilterDeviation is some array of Deviation initially an array of Deviation;
if(blazeMessage.request.application.product<>"UCL")then{
  if(blazeMessage.request.application.scheme <>"49")then{
    KERLANIP=true;
  }
  
for each Deviation in blazeMessage.response.applicationDecision.deviations such that (it is not null and it is known) do {
  AppFilterDeviation.append(it);
}
 
if (theBlazeMessageBT.appLevelCibilScore>=700 and  blazeMessage.response.applicationDecision.responseCode is equal to (ignoring case)("GREEN" or "AMBER" or "BROWN"))then{
       	for each Deviation in AppFilterDeviation do {
          if(it.reasonCode is known and it.reasonCode="41000" and blazeMessage.request.application.schemeGroup<>"20")then{
            it.ruleID="41000";
          }
			if(it.ruleID is known and (it.ruleID <> ("Common005" and  "Common080"  and "Common035" and "Banking025" and "Agri6"
   			   and "Banking002" and "Banking009"  and "Agri10" and "Agri12" and "41000")  ) )then{
				   if(KERLANIP=true)then{
                        	  	     if(it.overrideLevel="L99" and it.decisionResult is equal to (ignoring case) "REJECT")then{
                     		it.overrideLevel ="L3";
      						it.decisionResult="Deviation";
                           AppFilterDeviation.append(it);
							tempArray.append(it.ruleID);
                     }
                   }                  
                 }
              }
            }
}      		
]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='EqSoBl'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>