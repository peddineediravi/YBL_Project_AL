<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_aln_LTV_ABB_IncomeBased'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_aln_LTV_ABB_IncomeBased</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("Enetring fn_aln_LTV_ABB_IncomeBased");
anApplicant is some Applicant;
anDeviation is some Deviation initially an Deviation;
noOfApplicants is a integer initially 0;
nonApplicantSalaried  is a integer initially 0;
AppFilterDeviation is some array of Deviation initially an array of Deviation;
isSelfEmployed is a boolean initially false;

for each Applicant in blazeMessage.request.application.applicants do{
  		anApplicant =it;
  	noOfApplicants=noOfApplicants+1;
  	if(it.customerSegment is (known and available) and  it.customerSegment<>"1")then{
      		nonApplicantSalaried =nonApplicantSalaried+1;
    }
}
if (noOfApplicants=nonApplicantSalaried )then{
  			isSelfEmployed =true;
}
for each Deviation in blazeMessage.response.applicationDecision.deviations such that(it is not null and it is known)do{
AppFilterDeviation.append(it);
}
//Income Base schemeGroups
print("isSelfEmployed="isSelfEmployed);
print("theBlazeMessageBT.standardLtv="theBlazeMessageBT.standardLtv);
print("theBlazeMessageBT.ABBEMIRatio="theBlazeMessageBT.ABBEMIRatio);
print("blazeMessage.response.applicationDecision.responseCode="blazeMessage.response.applicationDecision.responseCode);
if(blazeMessage.request.application.schemeGroup is (known and available) and blazeMessage.request.application.schemeGroup = ("6" or "7" or "13" or "143" or "17" or "18" or "19" or"15" ))then{
		//
  		if (isSelfEmployed =true)then{
          		if(theBlazeMessageBT.appLevelCibilScore  is (known and available) and  theBlazeMessageBT.appLevelCibilScore <730)then{
                  		if(  theBlazeMessageBT.ABBEMIRatio <1)then{
                          	if( theBlazeMessageBT.actualLtv >80 )then{
                              		if(blazeMessage.response.applicationDecision.responseCode is known and blazeMessage.response.applicationDecision.responseCode =("GREEN" or "AMBER"))then{
                                      print("inside green and amber");	
                                      anDeviation.ruleID="12364";
											anDeviation.ruleName="LTV ABB Norms";
											anDeviation.decisionResult="Deviation";
										    anDeviation.reasonText="LTV ABB Norms not met";
                                      		anDeviation.reasonCode="78787";
                                      		anDeviation.overrideLevel="L3";
											fn_AppendDeviations(anDeviation);
                                    }
                            }
                        }
                }
        }

}
//if(blazeMessage.request.application.schemeGroup is (known and available) and blazeMessage.request.application.schemeGroup = ( "10" ))then{
		//
  //		if (isSelfEmployed =true)then{
          	//	if(theBlazeMessageBT.appLevelCibilScore  is (known and available) and  theBlazeMessageBT.appLevelCibilScore <730)then{
     //             		if(  theBlazeMessageBT.ABBEMIRatio <1)then{
        //                  	if( theBlazeMessageBT.standardLtv >80 )then{
           //                   		if(blazeMessage.response.applicationDecision.responseCode ="AMBER")then{
              //                        		anDeviation.ruleID="12364";
				//							anDeviation.ruleName="LTV ABB Norms";
					//						anDeviation.decisionResult="Deviation";
						//				    anDeviation.reasonText="LTV ABB Norms not met";
                           //           		anDeviation.reasonCode="78787";
                              //        		anDeviation.overrideLevel="L3";
								//			fn_AppendDeviations(anDeviation);
                                   // }
                           // }
                       // }
        //        }
        //}

//}]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='1pJkJq'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>