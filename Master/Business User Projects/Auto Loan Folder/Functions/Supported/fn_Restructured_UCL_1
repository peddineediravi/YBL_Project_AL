<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_UCL_Restructured'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_UCL_Restructured</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[AppFilterDeviation is some array of Deviation initially an array of Deviation;
RestructureFilterDeviation is some array of Deviation initially an array of Deviation;
ExcludeFilterDeviation is some array of Deviation initially an array of Deviation;
count is a integer initially 0;

if(blazeMessage.request.application.product="UCL")then{
    if(blazeMessage.request.application.specialTieup=("21112301" or "21112302"))then{
     
for each Deviation in blazeMessage.response.applicationDecision.deviations such that (it is not null and it is known) do {
  AppFilterDeviation.append(it);
}
      for each Deviation in AppFilterDeviation do {
    if(it.overrideLevel is known and it.overrideLevel<>("L1" and "L2" and "L99" and "L0" and "L4")  )then {//other than L1 and L2
				RestructureFilterDeviation.append(it);
        }
        else{
          			count=count+1;
                  }
      }
if(count>0 and RestructureFilterDeviation.count =0)then{
   blazeMessage.response.applicationDecision.deviations = ExcludeFilterDeviation as a array of Deviation;
}
 else if RestructureFilterDeviation.count = 0 then {
    blazeMessage.response.applicationDecision.deviations = AppFilterDeviation as a array of Deviation;
  }
 else if RestructureFilterDeviation.count > 0 then {
    blazeMessage.response.applicationDecision.deviations = RestructureFilterDeviation as a array of Deviation;
  }
    theBlazeMessageBT.maxEligibleAmount=0;
      blazeMessage.response.applicationDecision.maxEligibleLoanAmount=theBlazeMessageBT.maxEligibleAmount;
     }
}]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='LDXZRV'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>