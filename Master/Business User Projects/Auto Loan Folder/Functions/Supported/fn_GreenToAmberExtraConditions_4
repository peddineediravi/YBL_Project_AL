<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_GreenToAmberExtraConditions'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_GreenToAmberExtraConditions</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("fn_GreenToAmberExtraConditions");


anApplicant is some Applicant;
enquiry10count  is an integer initially 0;
enquiryAL3monthcount  is an integer initially 0;

anDeviation is some Deviation initially an Deviation;
tempArray is some array of string initially an array of string;
AppFilterDeviation is some array of Deviation initially an array of Deviation;
if(blazeMessage.request.application.product<>"UCL")then{

for each Deviation in blazeMessage.response.applicationDecision.deviations such that (it is not null and it is known) do{
 AppFilterDeviation.append(it);
}
  print("GreenXtra in side=="blazeMessage.response.applicationDecision.responseCode);
if (blazeMessage.response.applicationDecision.responseCode is known and 
    blazeMessage.response.applicationDecision.responseCode is equal to (ignoring case)("GREEN"))then{
	 for each Deviation in AppFilterDeviation do{
       	if(it.ruleID is known and (it.ruleID =("CIBIL030" or "CIBIL031")))then{
           blazeMessage.response.applicationDecision.responseCode="AMBER";
            blazeMessage.response.applicationDecision.scorecardResult[0].scorecardScore=700;
        }
        }
}
}
print(" blazeMessage.response.applicationDecision.responseCode==" blazeMessage.response.applicationDecision.responseCode);
//
if (theBlazeMessageBT.appLevelCibilScore is (known and available) and theBlazeMessageBT.appLevelCibilScore<650)then{
  if ( blazeMessage.response.applicationDecision.responseCode is (known and available) and  blazeMessage.response.applicationDecision.responseCode=(ignoring case)"Green")then{
    print("theBlazeMessageBT.appLevelCibilScore inside="theBlazeMessageBT.appLevelCibilScore);
    blazeMessage.response.applicationDecision.responseCode ="AMBER";
    	 blazeMessage.response.applicationDecision.scorecardResult[0].scorecardScore=700;
    	
 }
}
 if ( blazeMessage.response.applicationDecision.responseCode is (known and available) and  blazeMessage.response.applicationDecision.responseCode=(ignoring case)"Green")then{
   
   			for each Applicant in blazeMessage.request.application.applicants such that(it.applicantType is known and it.applicantType is equal to "P")do{
            	anApplicant = it;
              if(anApplicant.multiBureauReport is  (known and available)  and anApplicant.multiBureauReport.cibilResponse is  (known and available)  and anApplicant.multiBureauReport.cibilResponse.enquiries is (known and available) and anApplicant.multiBureauReport.cibilResponse.enquiries.count > 0)then{
                			 for each Enquiry in anApplicant.multiBureauReport.cibilResponse.enquiries do{
                               		if(it.enquiryPurpose is  (known and available) and  it.dateOfEnquiryFields is (known and available) and it.enquiryPurpose=(ignoring case)("AUTO LOAN"or "AUTO LOAN (PERSONAL)" ) and ((calendar().currentDate().subtractInDays(it.dateOfEnquiryFields).days<=90 )))then {
                                      		enquiryAL3monthcount=enquiryAL3monthcount+1;
                                    }
                            	if( it.dateOfEnquiryFields is  (known and available) and it.enquiringMemberShortName is  (known and available)  and it.enquiringMemberShortName <>"YES BANK" and
                                   ((calendar().currentDate().subtractInDays(it.dateOfEnquiryFields).days<=180)))then {
                                  		enquiry10count=enquiry10count+1
                                }
                             }
                	}
                }
   print("enquiryAL3monthcount="enquiryAL3monthcount"enquiry10count"enquiry10count);
   		if ((enquiryAL3monthcount  is  (known and available) and enquiryAL3monthcount>3) or (enquiry10count  is  (known and available) and enquiry10count >10))then{
          		blazeMessage.response.applicationDecision.responseCode ="AMBER";
          		 blazeMessage.response.applicationDecision.scorecardResult[0].scorecardScore=700;
        }
 }]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='KnXtTy'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>