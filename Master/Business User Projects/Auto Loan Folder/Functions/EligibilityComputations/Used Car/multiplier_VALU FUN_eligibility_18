<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_UCL_multiplier_VALU_FUN_eligibility'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_UCL_multiplier_VALU_FUN_eligibility</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("Entering fn_UCL_multiplier_VALU_FUN_eligibility");
currentAddress is an integer initially 0;
isOwned is a boolean initially false;
ABBcondition is a boolean initially false;
Message is a string initially "";
anDeviation is some Deviation initially an Deviation;
theBlazeMessageBT.maxEligibleAmount = 0;
maxEligibleAmount is a real initially 0;
multiplier is a real initially 0.0;
multiplierBasisAmount is a real initially 0.0;
multiplierValues is a real initially 0.0;
principalAmount is a real initially 0.0;
surrogateprincipalAmount is a real initially 0.0;
cashinHand is a real initially 0.0;
Rule19 is a real initially 0.0;
anApplicant is some Applicant;
loanDate is an integer initially -1;
valueAmount is a real initially 0;
assetages is a integer initially 0;
registerDates is a date;
hand1 is a real initially 0;
hand2 is a real initially 0;
tempinsurace is a real initially 0;
loaninsuredValue is a real initially 0;
tempABBEMIRatio is a real;
tempABBEMIRatioList is some array of real initially an array of real;

for each Applicant in blazeMessage.request.application.applicants do {
	anApplicant=it;
	for each Address in anApplicant.addresses such that (it.addressType  is  (known and available) and it.addressType  is equal to (ignoring case)("CURRES") )do{
		if(it.propertyType is  (known and available) and it.propertyType is equal to (ignoring case)("O" or "OP" or "OWNERSHI" or "OWN_COAP"))then{
			currentAddress=currentAddress+1;
		}
	}
} 
print("currentAddress====="currentAddress);
if(	currentAddress>0)then{
	isOwned=true;
}
print("isOwned====="isOwned);
print("Triveni ABBEMIRatio======" theBlazeMessageBT.ABBEMIRatio);
print("Triveni ABBEMIRatio1======" theBlazeMessageBT.ABBEMIRatio1);
if(theBlazeMessageBT.ABBEMIRatio is (known and available))then{
tempABBEMIRatioList.append(theBlazeMessageBT.ABBEMIRatio);
}
if(theBlazeMessageBT.ABBEMIRatio1 is (known and available))then{
tempABBEMIRatioList.append(theBlazeMessageBT.ABBEMIRatio1);
}
tempABBEMIRatio = tempABBEMIRatioList.max;

if(isOwned=true and   (tempABBEMIRatio  is (known and available) and  tempABBEMIRatio>1))then{
	ABBcondition=true;
}
//print("ABBcondition==== "ABBcondition);
apply fn_incomeBasedOnMultilplierProgram(blazeMessage);

if(theBlazeMessageBT.termSetInput.request.application.assetDetails.usedVehicleDetails.registrationDate is (known and available))then{
registerDates=theBlazeMessageBT.termSetInput.request.application.assetDetails.usedVehicleDetails.registrationDate;
assetages=portable().toInteger(calendar().currentDate().subtractInMonths(registerDates).months);
}

// ftuturedate calculation
for each Applicant in blazeMessage.request.application.applicants do{
  				anApplicant = it;
	for each Liability in anApplicant.liabilities such that( it.typeOfLoanProduct is known and it.typeOfLoanProduct is equal to (ignoring case)( "19070502" or "25" ) )do {
   	 if(it.loanClosureDate is known)then{
      loanDate=portable().toInteger(calendar().currentDate().subtractInDays(it.loanClosureDate).days);
    }
  }
}
print("loanDate=="loanDate);  
   
for each Applicant in blazeMessage.request.application.applicants do{
  				anApplicant = it;
   for each Liability in anApplicant.liabilities such that ( (it.considerForSurrogate is known and it.considerForSurrogate="Y")
      		  and  it.typeOfLoanProduct is equal to (ignoring case)( "19070502" or "25" ) 
			  and (it.principalOutstanding is known and it.principalOutstanding>0))do{				  
                               surrogateprincipalAmount=surrogateprincipalAmount+it.principalOutstanding;
  			}
    		for each Liability in anApplicant.liabilities such that(     it.typeOfLoanProduct is equal to (ignoring case)( "24"  or "03" or "BL LOAN" or "34" or "BL LOAN")  and
           	(it.noOfEMIsPaid is known and it.noOfEMIsPaid<=3))do{            
                if(it.principalOutstanding is known and it.principalOutstanding>0) then {
                principalAmount=it.principalOutstanding+principalAmount;
                }                        
            print("principalAmount=="principalAmount);
          }
}
print("Triveni ABBcondition ===="ABBcondition);
if(ABBcondition=false)then{
  print("Triveni heBlazeMessageBT.appLevelCibilScore======"theBlazeMessageBT.appLevelCibilScore);
	if(theBlazeMessageBT.appLevelCibilScore is (known and available) and theBlazeMessageBT.appLevelCibilScore<=730)then{
  		multiplierBasisAmount=theBlazeMessageBT.apraisedValue*1.4;
  		print("Triveni 1.4");
	} else if(theBlazeMessageBT.appLevelCibilScore is (known and available) and theBlazeMessageBT.appLevelCibilScore>730 and theBlazeMessageBT.appLevelCibilScore<=750)then{
  		multiplierBasisAmount=theBlazeMessageBT.apraisedValue*1.6;
  		print("Triveni 1.6");
	} else if(theBlazeMessageBT.appLevelCibilScore is (known and available) and theBlazeMessageBT.appLevelCibilScore>750)then{
  		multiplierBasisAmount=theBlazeMessageBT.apraisedValue*1.8;
   		print("Triveni 1.8");
	} else {
  		multiplierBasisAmount=0;
}
	print("Triveni multiplierBasisAmount=="multiplierBasisAmount);
	print("Triveni surrogateprincipalAmount=="surrogateprincipalAmount);
  print("Triveni principalAmount ======"principalAmount);
	multiplierValues=multiplierBasisAmount-principalAmount;
	if(multiplierValues<0)then{
  		multiplierValues=0;
	}
	print("Triveni multiplierValues=="multiplierValues);
	print("incomebasevalue=="theBlazeMessageBT.incomeBasedEligiblity);
}	
 if(ABBcondition=true)then{
	if(theBlazeMessageBT.appLevelCibilScore is (known and available) and theBlazeMessageBT.appLevelCibilScore<=730)then{
  		multiplierBasisAmount=theBlazeMessageBT.apraisedValue*1.6;
  		print("1.6");
	} else if(theBlazeMessageBT.appLevelCibilScore is (known and available) and theBlazeMessageBT.appLevelCibilScore>730 and theBlazeMessageBT.appLevelCibilScore<=750)then{
  		multiplierBasisAmount=theBlazeMessageBT.apraisedValue*1.8;
  		print("1.8");
	} else if(theBlazeMessageBT.appLevelCibilScore is (known and available) and theBlazeMessageBT.appLevelCibilScore>750)then{
  		multiplierBasisAmount=theBlazeMessageBT.apraisedValue*2.0;
   		print("2.0");
	} else {
  		multiplierBasisAmount=0;
}
	print("multiplierBasisAmount=="multiplierBasisAmount);
	print("surrogateprincipalAmount=="surrogateprincipalAmount);
	multiplierValues=multiplierBasisAmount-principalAmount;
	if(multiplierValues<0)then{
  		multiplierValues=0;
	}
	print("multiplierValues=="multiplierValues);
	print("incomebasevalue=="theBlazeMessageBT.incomeBasedEligiblity);
}	
	//feture date  -ve number
if(loanDate<0)then{
	multiplierValues=multiplierValues-surrogateprincipalAmount;
	print("feture date  -ve number"multiplierValues);
  	if(blazeMessage.request.application.scheme="175")then{
      if(blazeMessage.request.application.assetDetails.detailAssetLoan.assetType is (known and available) and
         blazeMessage.request.application.assetDetails.detailAssetLoan.assetType=("A1 RISK1" or "A1 RISK2" or "A2  RISK1" or "A2 RISK2" or 
        "A3 RISK1" or "A3 RISK2" or "EV A1R1" or "EV A1R2" or "EV A2R1" or "EV A2R2" or "EV A3R1" or "EV A3R2"))then{
		cashinHand=math().min(multiplierValues,1200000);
        print("Triveni scheme 175 loop cashinHand====="cashinHand);
      }
      if(blazeMessage.request.application.assetDetails.detailAssetLoan.assetType is (known and available) and
         blazeMessage.request.application.assetDetails.detailAssetLoan.assetType<>("A1 RISK1" and "A1 RISK2" and "A2  RISK1" and "A2 RISK2" and
        "A3 RISK1" and "A3 RISK2" and "EV A1R1" and "EV A1R2" and "EV A2R1" and "EV A2R2" and "EV A3R1" and "EV A3R2"))then{
		cashinHand=math().min(multiplierValues,1500000);
         print("Triveni scheme 175 loop======"cashinHand);
      }
    	surrogateprincipalAmount=surrogateprincipalAmount;
    	maxEligibleAmount=surrogateprincipalAmount+cashinHand;
        print("Triveni maxEligibleAmount======"maxEligibleAmount);
  	}
  	if(blazeMessage.request.application.scheme="176")then{
       if(blazeMessage.request.application.assetDetails.detailAssetLoan.assetType is (known and available) and
         blazeMessage.request.application.assetDetails.detailAssetLoan.assetType=("A1 RISK1" or "A1 RISK2" or "A2  RISK1" or "A2 RISK2" or 
        "A3 RISK1" or "A3 RISK2" or "EV A1R1" or "EV A1R2" or "EV A2R1" or "EV A2R2" or "EV A3R1" or "EV A3R2"))then{
		cashinHand=math().min(multiplierValues,1200000);
      }
      if(blazeMessage.request.application.assetDetails.detailAssetLoan.assetType is (known and available) and
         blazeMessage.request.application.assetDetails.detailAssetLoan.assetType<>("A1 RISK1" and "A1 RISK2" and "A2  RISK1" and "A2 RISK2" and
        "A3 RISK1" and "A3 RISK2" and "EV A1R1" and "EV A1R2" and "EV A2R1" and "EV A2R2" and "EV A3R1" and "EV A3R2"))then{
		cashinHand=math().min(multiplierValues,1500000);
      }
		surrogateprincipalAmount=surrogateprincipalAmount;
    	maxEligibleAmount=surrogateprincipalAmount+cashinHand;
  	}
} 
	//+ve mean closed and currentdate to previous dates
if(loanDate>=0)then{
   		if(blazeMessage.request.application.scheme="175")then{
           if(blazeMessage.request.application.assetDetails.detailAssetLoan.assetType is (known and available) and
         	blazeMessage.request.application.assetDetails.detailAssetLoan.assetType=("A1 RISK1" or "A1 RISK2" or "A2  RISK1" or "A2 RISK2" or 
        	"A3 RISK1" or "A3 RISK2" or "EV A1R1" or "EV A1R2" or "EV A2R1" or "EV A2R2" or "EV A3R1" or "EV A3R2"))then{
			cashinHand=math().min(multiplierValues,1200000);
             print("Triveni loanDate loop cashinHand===== "cashinHand);
      }
      if(blazeMessage.request.application.assetDetails.detailAssetLoan.assetType is (known and available) and
         blazeMessage.request.application.assetDetails.detailAssetLoan.assetType<>("A1 RISK1" and "A1 RISK2" and "A2  RISK1" and "A2 RISK2" and
        "A3 RISK1" and "A3 RISK2" and "EV A1R1" and "EV A1R2" and "EV A2R1" and "EV A2R2" and "EV A3R1" and "EV A3R2"))then{
		cashinHand=math().min(multiplierValues,1500000);
        print("Triveni loanDate loop cashinHand1===== "cashinHand);
      }
			surrogateprincipalAmount=0;
    		maxEligibleAmount=cashinHand;
          print("Triveni loanDate loop maxEligibleAmount===== "maxEligibleAmount);
  }
  		if(blazeMessage.request.application.scheme="176")then{
			 if(blazeMessage.request.application.assetDetails.detailAssetLoan.assetType is (known and available) and
         blazeMessage.request.application.assetDetails.detailAssetLoan.assetType=("A1 RISK1" or "A1 RISK2" or "A2  RISK1" or "A2 RISK2" or 
        "A3 RISK1" or "A3 RISK2" or "EV A1R1" or "EV A1R2" or "EV A2R1" or "EV A2R2" or "EV A3R1" or "EV A3R2"))then{
		cashinHand=math().min(multiplierValues,1200000);
      }
      if(blazeMessage.request.application.assetDetails.detailAssetLoan.assetType is (known and available) and
         blazeMessage.request.application.assetDetails.detailAssetLoan.assetType<>("A1 RISK1" and "A1 RISK2" and "A2  RISK1" and "A2 RISK2" and
        "A3 RISK1" and "A3 RISK2" and "EV A1R1" and "EV A1R2" and "EV A2R1" and "EV A2R2" and "EV A3R1" and "EV A3R2"))then{
		cashinHand=math().min(multiplierValues,1500000);
      }
    		surrogateprincipalAmount=0;
    		maxEligibleAmount=cashinHand;
  		}
}
print("CahinHandbefore final eligibility=="cashinHand);
print("maxeligibility before final eligibility=="maxEligibleAmount);
print("assetageinmultiplier==="assetages);
//Final Eligibility calclation
if(valueAmount>0 and assetages>48)then{
 	theBlazeMessageBT.maxEligibleAmount=math().min(maxEligibleAmount,valueAmount);
}else{
	theBlazeMessageBT.maxEligibleAmount=maxEligibleAmount;
}
print("Triveni Multiplier eligible Value=="theBlazeMessageBT.maxEligibleAmount);
print("Triveni Value Amount===== "valueAmount);
if(theBlazeMessageBT.maxEligibleAmount=valueAmount)then{
 cashinHand=theBlazeMessageBT.maxEligibleAmount-surrogateprincipalAmount;
  surrogateprincipalAmount=surrogateprincipalAmount;
  print("Triveni theBlazeMessageBT.maxEligibleAmount=valueAmount"surrogateprincipalAmount);
}else {
  cashinHand=cashinHand;
  surrogateprincipalAmount=surrogateprincipalAmount;
}

theBlazeMessageBT.usedCashinHand=cashinHand;
theBlazeMessageBT.cashDealer=surrogateprincipalAmount;
print("cahinhandlast=="theBlazeMessageBT.usedCashinHand);
if(theBlazeMessageBT.usedCashinHand<=0)then{
  theBlazeMessageBT.usedCashinHand=0;
  cashinHand=0;
}
if(theBlazeMessageBT.cashDealer>=theBlazeMessageBT.maxEligibleAmount)then{
  theBlazeMessageBT.cashDealer=theBlazeMessageBT.maxEligibleAmount;
  surrogateprincipalAmount=theBlazeMessageBT.maxEligibleAmount
}else
  {
     theBlazeMessageBT.cashDealer=  theBlazeMessageBT.cashDealer; 
    surrogateprincipalAmount=surrogateprincipalAmount;
  }


//hand1=theBlazeMessageBT.maxEligibleAmount-surrogateprincipalAmount;
//hand2=blazeMessage.request.application.loanDetails.loanAmount-surrogateprincipalAmount;
//print("hand1"hand1"hand2"hand2);
//cashinHand=math().min(hand1, hand2);
if(cashinHand<=0)then{
  cashinHand=0;
  theBlazeMessageBT.usedCashinHand=0;
}
print("maxeligbleamount after==="theBlazeMessageBT.maxEligibleAmount);
if(theBlazeMessageBT.cashDealer>=theBlazeMessageBT.maxEligibleAmount)then{
  theBlazeMessageBT.cashDealer=theBlazeMessageBT.maxEligibleAmount;
  surrogateprincipalAmount=theBlazeMessageBT.maxEligibleAmount
}else
  {
     theBlazeMessageBT.cashDealer=  theBlazeMessageBT.cashDealer; 
     surrogateprincipalAmount=surrogateprincipalAmount;
  }
  
 
  
  
  
print("cashinHand==Anil"theBlazeMessageBT.usedCashinHand);
theBlazeMessageBT.usedCashinHand=cashinHand ;
print("theBlazeMessageBT.usedCashinHand=Anil"theBlazeMessageBT.usedCashinHand);
//multiplier INt ernal sesment method Parallel Loan
if(blazeMessage.request.application.scheme="176" and blazeMessage.request.application.loanDetails.assesmentMethod is known and
  blazeMessage.request.application.loanDetails.assesmentMethod=("21120201" or "23112201" or "23112022" or "16112201"))then{
 			print("parrllel loan");
			//cashinHand=math().min(multiplierValues,1200000);
   if(blazeMessage.request.application.assetDetails.detailAssetLoan.assetType is (known and available) and
         blazeMessage.request.application.assetDetails.detailAssetLoan.assetType=("A1 RISK1" or "A1 RISK2" or "A2  RISK1" or "A2 RISK2" or 
        "A3 RISK1" or "A3 RISK2" or "EV A1R1" or "EV A1R2" or "EV A2R1" or "EV A2R2" or "EV A3R1" or "EV A3R2"))then{
		cashinHand=math().min(multiplierValues,1200000);
		print("else 12L");
      }else if(blazeMessage.request.application.assetDetails.detailAssetLoan.assetType is (known and available) and
         blazeMessage.request.application.assetDetails.detailAssetLoan.assetType<>("A1 RISK1" and "A1 RISK2" and "A2  RISK1" and "A2 RISK2" and
        "A3 RISK1" and "A3 RISK2" and "EV A1R1" and "EV A1R2" and "EV A2R1" and "EV A2R2" and "EV A3R1" and "EV A3R2"))then{
		cashinHand=math().min(multiplierValues,1500000);
		print("else 15L");
		
      }
			surrogateprincipalAmount=0;
    		theBlazeMessageBT.maxEligibleAmount=cashinHand;
  			Message = "NOC needs to be blocked for Mother loan";
  			fn_AppendActionMessage(Message);
}else{
  cashinHand=cashinHand;
  surrogateprincipalAmount=surrogateprincipalAmount;
  theBlazeMessageBT.maxEligibleAmount=theBlazeMessageBT.maxEligibleAmount;
  }

Rule19=blazeMessage.request.application.assetDetails.totalAssets*cashinHand;
print("Rule19=="Rule19);
if(Rule19>3000000)then{
  anDeviation.ruleID="RefiananceMultiplier019";
            anDeviation.ruleName="Eligibility_100019";
            anDeviation.ruleDescription="Eligibility norms check";
            anDeviation.decisionResult = "Reject";
            anDeviation.reasonText = "Cash in Hand more than 30 lacs";
            anDeviation.reasonCode = "100019";
            anDeviation.overrideLevel ="L99";
            fn_AppendDeviations(anDeviation);      
}
 if (theBlazeMessageBT.maxEligibleAmount>blazeMessage.request.application.loanDetails.loanAmount)then{
	
	  theBlazeMessageBT.maxEligibleAmount=blazeMessage.request.application.loanDetails.loanAmount;
	  cashinHand=theBlazeMessageBT.maxEligibleAmount-surrogateprincipalAmount;
	   print("inside if maxEligibleAmount>loanAmount Anil"theBlazeMessageBT.maxEligibleAmount"cashinHand"cashinHand);
  }else{
	  theBlazeMessageBT.maxEligibleAmount=theBlazeMessageBT.maxEligibleAmount;
	  cashinHand=theBlazeMessageBT.maxEligibleAmount-surrogateprincipalAmount;
	   print("inside if maxEligibleAmount>loanAmount Anil else"theBlazeMessageBT.maxEligibleAmount"cashinHand"cashinHand);
  }

Message = "cash in Hand : "cashinHand" Cash to Dealer : "surrogateprincipalAmount"";
  			fn_AppendActionMessage(Message);]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='8fsFac'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>