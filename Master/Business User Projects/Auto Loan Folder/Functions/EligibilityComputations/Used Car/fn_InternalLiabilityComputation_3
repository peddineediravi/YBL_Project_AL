<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_UCL_InternalLiabilityComputation'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_UCL_InternalLiabilityComputation</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[anApplication is some Application initially blazeMessage.request.application;
isRepaymentAccountHolderFound is a boolean initially false;
assetDetails is some AssetDetails initially anApplication.assetDetails;
anApplicant is some Applicant;
theBlazeMessageBT.maxEligibleAmount = 0;
maxEligibleAmount is a real initially 0;   		

//Internal Liability Program
if(anApplication.schemeGroup is known and anApplication.schemeGroup ="44") then {

  if(anApplication.scheme is known and (anApplication.scheme = "160" or anApplication.scheme = "161"))then{ //Current account or Savings Account
    
    //Finding repayment account holder.
	if(blazeMessage.request is known and blazeMessage.request.application is known and blazeMessage.request.application.applicants is known and blazeMessage.request.application.applicants.count > 0)
    then{
      	for each Applicant in blazeMessage.request.application.applicants such that(isRepaymentAccountHolderFound is available and isRepaymentAccountHolderFound=false and it.bankDetails is known and it.bankDetails.count>0) do {
          		anApplicant =it;
      	    if(anApplicant.bankDetails is known and at least 1 BankDetails in anApplicant.bankDetails satisfy (it.isRepaymentAccount is known and isRepaymentAccount=true))then {
			      	isRepaymentAccountHolderFound=true;
              		
		     }  
         }        
    }
    
   	if(anApplication.scheme is known and anApplication.scheme = "160" and anApplicant.annualIncome is known and anApplicant.annualIncome.totalIncome is known and theBlazeMessageBT.ABB is available) then  //Current account 
    		maxEligibleAmount = math().max(anApplicant.annualIncome.totalIncome*24, theBlazeMessageBT.ABB*15);    
    else if(anApplication.scheme is known and anApplication.scheme = "161" and anApplicant.annualIncome is known and anApplicant.annualIncome.totalIncome is known and theBlazeMessageBT.ABB is available)then //Savings Account
     	maxEligibleAmount = math().max(anApplicant.annualIncome.totalIncome*24, theBlazeMessageBT.ABB*20); 
  } 
   else  if(anApplication.scheme is known and anApplication.scheme = "162")then { //Salary Account     
    		if(blazeMessage.request is known and blazeMessage.request.application is known and blazeMessage.request.application.applicants is known)then{
              			  for each Applicant in blazeMessage.request.application.applicants such that (it.customerSegment is known and customerSegment="1" and it.annualIncome is known and it.annualIncome.totalIncome is known) do {
   		     				 maxEligibleAmount =math().max(maxEligibleAmount,  it.annualIncome.totalIncome); // Maximum among salaried applicants total income amount.                           
      					   }
            }
  }
}
theBlazeMessageBT.maxEligibleAmount = maxEligibleAmount;


    
    
    ]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='VTQleH'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>