<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_UCL_YesBankEmployeeComputation'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_UCL_YesBankEmployeeComputation</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[anApplication is some Application initially blazeMessage.request.application;
isYBLEmployeeApplicantMeetsMinimumNorms is a boolean initially false;
assetDetails is some AssetDetails initially anApplication.assetDetails;
theBlazeMessageBT.maxEligibleAmount = 0;
maxEligibleAmount is a real initially 0;   		
anApplicant is some Applicant;

//  Yes Bank Employee Program
if (anApplication.schemeGroup is known and anApplication.schemeGroup="47")then
  {
    	maxEligibleAmount=0;
    	isYBLEmployeeApplicantMeetsMinimumNorms = false;
    //Checking whether YBL employee meeting minimum income norms.
    	if(blazeMessage.request is known and blazeMessage.request.application is known and blazeMessage.request.application.applicants is known and blazeMessage.request.application.applicants.count > 0)then{
          		for each Applicant in blazeMessage.request.application.applicants such that (it.customerSegment is known and customerSegment ="1" and it.employmentDetails is known 
                                                                                     and employmentDetails.employerName is known and employmentDetails.employerName is equal to "10006" ) do {    
                  			anApplicant=it;
                 
 			if(isYBLEmployeeApplicantMeetsMinimumNorms is available and isYBLEmployeeApplicantMeetsMinimumNorms = false) then {                 
  				  isYBLEmployeeApplicantMeetsMinimumNorms = (it.annualIncome.totalIncome > DT_UsedCar_MinimumIncomeLookup(anApplication.schemeGroup,anApplication.scheme,it.customerSegment,assetDetails.detailAssetLoan.assetCategory,anApplication.loanDetails.loanAmount));
 			 }     
		}
        }
    		
    	// YBL Employee meeting minimum income norms then clubbing income of all other co-applicants income for elibility.
    	 if(isYBLEmployeeApplicantMeetsMinimumNorms is (known and available) and isYBLEmployeeApplicantMeetsMinimumNorms = true) then {
     		   for each Applicant in blazeMessage.request.application.applicants such that( it.annualIncome is known and it.annualIncome.incomeBasedEligbileAmount is known) do {
   		      		  // Sum of all applicants income based eligbile amount (i.e income*multiplier)
           			maxEligibleAmount = maxEligibleAmount + it.annualIncome.incomeBasedEligbileAmount;
    		  }
         }
         else {  // Consider only YBL employee income for eligibility derivation.
           		if(blazeMessage.request is known and blazeMessage.request.application is known and blazeMessage.request.application.applicants is known)then{
                  for each Applicant in blazeMessage.request.application.applicants such that (it.customerSegment is known and customerSegment ="1" and employmentDetails is known and employmentDetails.employerName is known and employmentDetails.employerName is equal to "10006" ) do {          		
                 		maxEligibleAmount +=it.annualIncome.incomeBasedEligbileAmount; 
                }
                }
         }  
     theBlazeMessageBT.maxEligibleAmount = maxEligibleAmount;
  } ]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='VTQleH'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>