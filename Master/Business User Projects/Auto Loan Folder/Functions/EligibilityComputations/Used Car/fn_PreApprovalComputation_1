<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_UCL_PreApprovalComputation'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_UCL_PreApprovalComputation</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[anApplication is some Application initially blazeMessage.request.application;
isSingleApplicantMeetsMinimumNorms is a boolean initially false;
assetDetails is some AssetDetails initially anApplication.assetDetails;
theBlazeMessageBT.maxEligibleAmount = 0;
maxEligibleAmount is a real initially 0;   		
anApplicant is some Applicant;
tempAccountType is a string;
isRepaymentAccountApplicantFound is a boolean initially false;
cibilScore is an integer;
// Eligbility derivation is based on Repayment account type for this scheme.
//1) Salary repayment account is from salaried applicant
//2) Current and Savings repayment account is from non-salaried applicant.

if(anApplication.schemeGroup is known and anApplication.schemeGroup="48") then {
  		if(blazeMessage.request.application.applicants is known and blazeMessage.request.application.applicants.count > 0)then{
          	 for each Applicant in blazeMessage.request.application.applicants  do{
               			 anApplicant =it;
  					if( isRepaymentAccountApplicantFound=false and anApplicant.bankDetails is known and anApplicant.bankDetails.count > 0)  then {
 		  					for each BankDetails in anApplicant.bankDetails such that (isRepaymentAccount is known and isRepaymentAccount=true) do {
  			   							tempAccountType=it.accountType;
  			   							isRepaymentAccountApplicantFound=true;
  			 				} 
						}
									if(anApplicant.multiBureauReport is known and anApplicant.multiBureauReport.cibilResponse is known and anApplicant.multiBureauReport.cibilResponse.scores[0] is known and anApplicant.multiBureauReport.cibilResponse.scores[0].score is known)then{
  																													cibilScore = anApplicant.multiBureauReport.cibilResponse.scores[0].score; 
									}
               
               
               
     			}
        	}
 

  
  if(isRepaymentAccountApplicantFound = true and anApplicant.customerSegment is known and anApplicant.customerSegment ="1") then  // Salaried Applicant holds repayment account of Salaried account
  {
    		for each Applicant in blazeMessage.request.application.applicants such that (it.customerSegment is known and customerSegment="1" and  it.annualIncome is known and it.annualIncome.totalIncome is known) do {
   		     			 maxEligibleAmount =math().max(maxEligibleAmount,  it.annualIncome.totalIncome); // Maximum among salaried applicants total income amount.                           
       		}
      		maxEligibleAmount = maxEligibleAmount * DT_GetMultiplierForPreApproved(cibilScore,tempAccountType);
   }
  else if(isRepaymentAccountApplicantFound = true and theBlazeMessageBT.ABB is available) then{
    maxEligibleAmount = theBlazeMessageBT.ABB * DT_GetMultiplierForPreApproved(cibilScore,tempAccountType);
  } //Repayment account is not Salary account so applicant is not salaried applicant
   
  theBlazeMessageBT.maxEligibleAmount =maxEligibleAmount;
}
  


    
    
    ]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='VTQleH'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>