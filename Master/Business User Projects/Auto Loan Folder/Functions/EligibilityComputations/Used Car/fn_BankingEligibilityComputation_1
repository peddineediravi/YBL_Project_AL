<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_UCL_BankingEligibilityComputation'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_UCL_BankingEligibilityComputation</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[anApplication is some Application initially blazeMessage.request.application;
isSingleApplicantMeetsMinimumNorms is a boolean initially false;
assetDetails is some AssetDetails initially anApplication.assetDetails;
theBlazeMessageBT.maxEligibleAmount = 0;
maxEligibleAmount is a real initially 0;   		
ltvFromGrid is a real initially 0;

ltvFromGrid = ProcessLTVRules(true)/100;
//Banking Program schemes
if(anApplication.schemeGroup is known and anApplication.schemeGroup = "45") then
  {
       if(anApplication.scheme is known and assetDetails.usedVehicleDetails is known and assetDetails.usedVehicleDetails.assetCost is known and anApplication.scheme = "163") then { // Only banking
         dgv is a real;
         costOfVehicle is a real;
         dgv= assetDetails.usedVehicleDetails.assetCost*(DT_UsedCar_depreciationGridValue(blazeMessage)/100);
         costOfVehicle = math().max(dgv,assetDetails.usedVehicleDetails.appraisedValue);
         maxEligibleAmount=math().min(costOfVehicle*ltvFromGrid, 400000); 
       }
       else  if(anApplication.scheme is known and anApplication.scheme = "165") then { // BANKING AND REPAYMENT
        anApplicant is some Applicant;
         existingLoanAmount is a real initially 0;
        	if(anApplication.applicants is known and anApplication.applicants.count > 0)then{
              		 for each Applicant in anApplication.applicants such that (applicantType is known and applicantType="P") do {  
                		  anApplicant=it;
             			  if(anApplicant.liabilities is known and anApplicant.liabilities.count > 0)then{
                            	for each Liability in anApplicant.liabilities such that  (it.typeOfLoanProduct is known and it.typeOfLoanProduct = ("19070502" or "19070503" or "19070504") and balanceTenure is known and balanceTenure > 0 and principalOutstanding is known and principalOutstanding > 0) do {		
                                  existingLoanAmount = it.loanAmount;                                 
               			       }  
                           }               
           			   }
            }
         if(assetDetails.usedVehicleDetails is known and assetDetails.usedVehicleDetails.assetCost is known and existingLoanAmount > 0) then {
        		 maxEligibleAmount=math().min(assetDetails.usedVehicleDetails.assetCost*ltvFromGrid , 1500000);   
           		maxEligibleAmount=math().min(maxEligibleAmount, existingLoanAmount*1.5);   
         }
         else if(assetDetails.usedVehicleDetails is known and assetDetails.usedVehicleDetails.assetCost is known)then{
           					  maxEligibleAmount=math().min(assetDetails.usedVehicleDetails.assetCost*ltvFromGrid, 1500000);  
         }
           
       }
    	else if(anApplication.scheme is known and anApplication.scheme = "164") then { // BANKING AND OWNERSHIP
         maxEligibleAmount=math().min(assetDetails.usedVehicleDetails.assetCost*ltvFromGrid, 750000);
           //10 lacs for Honda City, Ciaz, Toyota Innova, Jeep, Breeza , and Honda WRV , Hyundai Verna and Hyundai Creta , Toyota Yaris
         if(anApplication.assetDetails is known and anApplication.assetDetails.detailAssetLoan is known and anApplication.assetDetails.detailAssetLoan.assetModel is known and  (anApplication.assetDetails.detailAssetLoan.assetModel = ("27424" or "24513" or "24514" or "24420" or "24381" or "24386" or "28137" or "24398" or "24387" or "28736" ))) then
               maxEligibleAmount=math().min(assetDetails.usedVehicleDetails.assetCost*ltvFromGrid, 1000000);
       }
    
  }

theBlazeMessageBT.maxEligibleAmount = maxEligibleAmount;
    
    
    ]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='VTQleH'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>