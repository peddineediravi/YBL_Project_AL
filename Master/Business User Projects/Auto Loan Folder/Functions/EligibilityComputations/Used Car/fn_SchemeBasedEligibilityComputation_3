<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_UCL_SchemeBasedEligibilityComputation'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_UCL_SchemeBasedEligibilityComputation</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value>anApplication is some Application initially blazeMessage.request.application;
isSingleApplicantMeetsMinimumNorms is a boolean initially false;
assetDetails is some AssetDetails initially anApplication.assetDetails;

theBlazeMessageBT.maxEligibleAmount = 0;
maxEligibleAmount is a real initially 0;   		

//Organized, Non-Organized Programs
if(anApplication.schemeGroup is known and (anApplication.schemeGroup="42"
   or anApplication.schemeGroup="43"  or anApplication.schemeGroup="119" or 
  (anApplication.schemeGroup="50" and anApplication.scheme="177"))) then
 {   		
   		for each Applicant in blazeMessage.request.application.applicants such that( it.annualIncome is known and  it.annualIncome.incomeBasedEligbileAmount is known) do {
   		        if(isSingleApplicantMeetsMinimumNorms = true) then { // Sum of all applicants income based eligbile amount (i.e income*multiplier)
           			maxEligibleAmount = maxEligibleAmount + it.annualIncome.incomeBasedEligbileAmount;
    		  }
          	 else {
                 maxEligibleAmount =math().max(maxEligibleAmount,  it.annualIncome.incomeBasedEligbileAmount); // Maximum of all applicants income based eligible amount.
             }               
       }
   theBlazeMessageBT.maxEligibleAmount = maxEligibleAmount;
 }

//Banking Program schemes
else if(anApplication.schemeGroup is known and anApplication.schemeGroup="45") then {
	apply fn_UCL_BankingEligibilityComputation(blazeMessage);         
  }
//Agri based
else if(anApplication.schemeGroup is known and anApplication.schemeGroup="154") then {
apply fn_UCL_AgriBasedEligibilityComputation(blazeMessage);         
  }


//Internal Liability Program
else if(anApplication.schemeGroup is known and anApplication.schemeGroup="44") then {
 	apply fn_UCL_InternalLiabilityComputation(blazeMessage);
}
//Pre Approved Program
else if(anApplication.schemeGroup is known and anApplication.schemeGroup="48") then {
 	apply fn_UCL_PreApprovalComputation(blazeMessage);
}
//FD Lien
else if(anApplication.schemeGroup is known and anApplication.schemeGroup="46") then {
	apply fn_UCL_FDLienComputation(blazeMessage);
}
// Yes Bank
else if (anApplication.schemeGroup is known and anApplication.schemeGroup="47")then {
  	apply fn_UCL_YesBankEmployeeComputation(blazeMessage);
  }
// Refiance Program
else if (anApplication.schemeGroup is known and anApplication.schemeGroup="50")then {
  	apply fn_UCL_RefinanceEligibilityComputation(blazeMessage);
  }
        </value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='VTQleH'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>