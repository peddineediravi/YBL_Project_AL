<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_SalariedIncomeComputation'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_SalariedIncomeComputation</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[anApplicant is some Applicant;
anIncome is some Income;
aMultiplier is a real initially 2.0;

if(blazeMessage.request is known and blazeMessage.request.application is known and blazeMessage.request.application.applicants is known and blazeMessage.request.application.applicants.count >0)then{
  for each Applicant in blazeMessage.request.application.applicants such that(it.customerSegment is known and it.constitution is known) do
  {
        anApplicant=it;  
        
    if(anApplicant.customerSegment="1" and anApplicant.constitution= "1") then { // Salaried Individual
       
      // anApplicant.annualIncome = a ConsolidatedIncome;
    	anApplicant.annualIncome.totalIncome = 0;
        if( anApplicant.incomes is known and anApplicant.incomes.count > 0) then
      {
   	   for each Income in anApplicant.incomes such that(it.netIncome is known) do 
      {
        	anIncome=it;
            if(anIncome.head = "01") then //Basic
                  anApplicant.annualIncome.totalIncome+=anIncome.netIncome;
        	else if(anIncome.head = "07") then //Bonus
                  anApplicant.annualIncome.totalIncome+=anIncome.netIncome;
           else if(anIncome.head = "111") then //Gross income as per salary slip
                  anApplicant.annualIncome.totalIncome+=anIncome.netIncome
            else if(anIncome.head = "112") then //Income as per latest Form 16
                  anApplicant.annualIncome.totalIncome+=anIncome.netIncome;
         else if(anIncome.head = "37") then //Rental income
                  anApplicant.annualIncome.totalIncome+=anIncome.netIncome;
        else if(anIncome.head = "113") then //Income as per latest ITR
                  anApplicant.annualIncome.totalIncome+=anIncome.netIncome;
        else if(anIncome.head = "130") then //Pension income
                  anApplicant.annualIncome.totalIncome+=anIncome.netIncome;
         else if(anIncome.head = "115") then //Salary certificate
                  anApplicant.annualIncome.totalIncome+=anIncome.netIncome;
         else if(anIncome.head = "114") then //Salary Credit in Bank
                  anApplicant.annualIncome.totalIncome+=anIncome.netIncome;
         else if(anIncome.head = "106") then //Variable bonus
                  anApplicant.annualIncome.totalIncome+=anIncome.netIncome;
         else if(anIncome.head = "105") then //Variable incentive
                  anApplicant.annualIncome.totalIncome+=anIncome.netIncome;
        
      }
         theBlazeMessageBT.applicationIncome=anApplicant.annualIncome.totalIncome;
        print("(anApplicant.annualIncome.totalIncome/12)===="anApplicant.annualIncome.totalIncome);
           if (blazeMessage.request.application.product="ALN" and blazeMessage.request.application.schemeGroup is  (known and available) and 
  blazeMessage.request.application.schemeGroup =( "13" or "143"))then{
	
        if ((anApplicant.annualIncome.totalIncome/12) <= 30000)then{
          aMultiplier =2;
        }
		if ((anApplicant.annualIncome.totalIncome/12) > 30000)then{
       		if(theBlazeMessageBT.appLevelCibilScore <=730)then{
                aMultiplier =2;
            }else if(theBlazeMessageBT.appLevelCibilScore >730 and theBlazeMessageBT.appLevelCibilScore <= 770)then{
               aMultiplier =2.5;
         }else if(theBlazeMessageBT.appLevelCibilScore >=771)then{
               aMultiplier =3;
        }
             
       }
     if (theBlazeMessageBT.Proprietor=true)then{
             aMultiplier =1.5;
        }else{
          aMultiplier=aMultiplier;
        }
	   }
        print(aMultiplier"aMultiplier final");
      anApplicant.annualIncome.incomeBasedEligbileAmount = anApplicant.annualIncome.totalIncome *aMultiplier;
    }   
 }
  }
}]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value>Computation of total income for salaried applicant. Considering all income heads specified in request.</value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='SduZLU'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>