<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_AgriBasedComputation'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_AgriBasedComputation</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[anApplication is some Application initially blazeMessage.request.application;
isYBLEmployeeApplicantMeetsMinimumNorms is a boolean initially false;
assetDetails is some AssetDetails initially anApplication.assetDetails;
theBlazeMessageBT.maxEligibleAmount = 0;
maxEligibleAmount is a real initially 0;   		
anApplicant is some Applicant;
totalNumOfAcres is a real initially 0;
totalObligation is a real initially 0;
foir is a real initially 0;
anDeviation is some Deviation;
totalIncome is a real initially 0;

// Agri Land based program
if (anApplication.schemeGroup is known and anApplication.schemeGroup="41")then
  {
    	maxEligibleAmount=0;    	
    	if( anApplication.applicants is known and  anApplication.applicants.count > 0)then{
          	for each Applicant in anApplication.applicants do {
                 anApplicant =it;
             	totalObligation= totalObligation+anApplicant.annualIncome.totalObligation;
				 totalIncome=totalIncome+anApplicant.annualIncome.totalIncome;
          if (anApplicant.agriDetails is known and anApplicant.agriDetails.state is known and (anApplicant.agriDetails.state = ("8" or "10") and (anApplicant.agriDetails.noOfAcres is known and anApplicant.agriDetails.noOfAcres>=3 and customerSegment<>"1") and anApplicant.addresses is known) 
                and at least 1 Address in anApplicant.addresses satisfies (addressType is known and addressType = "CURRES" and state is known and state= ("8" or "10" )))  then {
						
          				maxEligibleAmount= maxEligibleAmount + (anApplicant.agriDetails.noOfAcres *1*100000);
          }
            else if (anApplicant.agriDetails is known and anApplicant.agriDetails.state is known and (anApplicant.agriDetails.state = ("4" or "9" or "3" or "10045" or "2" or "12" or "21") and (anApplicant.agriDetails.noOfAcres is known and anApplicant.agriDetails.noOfAcres>=5 and customerSegment<>"1") and anApplicant.addresses is known)
            			  and at least 1 Address in anApplicant.addresses satisfies (addressType is known and addressType = "CURRES" and state is known and state= ("4" or "9" or "3" or "10045" or "2" or "12" or "21"))) then {
							    //totalObligation= totalObligation+anApplicant.annualIncome.totalObligation;
								//totalIncome=totalIncome+anApplicant.annualIncome.totalIncome;
          						maxEligibleAmount= maxEligibleAmount + (anApplicant.agriDetails.noOfAcres *1*100000);
            }          
        }
        }
     theBlazeMessageBT.maxEligibleAmount = maxEligibleAmount*2;
	 
	foir=((totalObligation+(blazeMessage.request.application.loanDetails.loanEMI*12))/totalIncome)*100;  
	anDeviation = DT_IIRNorms(anApplication.schemeGroup,anApplication.scheme,blazeMessage.request.application.assetDetails.detailAssetLoan,0,"NonSalaried","NA",foir);
	fn_AppendDeviations(anDeviation);    
	 
  }
    
    
    ]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='VTQleH'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>