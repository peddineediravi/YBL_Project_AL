<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_LTV_Restriction_for_High_Risk'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_LTV_Restriction_for_High_Risk</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("Entering to LTV Restriction for High Risk Function");
anApplicant is some Applicant;
numberofacres is a real initially 0.0;
supplier is a real initially 0.0;
thepincodeApp is a real  initially 0.0;
thepincodeCoApp is a real initially 0.0;
count is a real  initially 0.0;
actualLTV is a real initially 0.0;
isApplicant is a boolean initially false;
RestrictedLTV is a real initially 0.0;
minLTV is a real initially 0.0;

//fn(High_Risk_Dealer);

for each Applicant in theFMABT.termSetInput.request.application.applicants do{
anApplicant = it;
  if( it.applicantType=("P" or "C"))then{
    if(it.noOfAcres is known)then{
	  numberofacres = numberofacres + it.noOfAcres;
			  }
}		  
}
print("numberofacres==="numberofacres);
supplier = apply DT_HighRiskSupplier(blazeMessage);
if(supplier is (unknown or unavailable) ) then {
  supplier = 0;
}
print("supplier=="supplier);
print("theBlazeMessageBT.standardLtv==initial"theBlazeMessageBT.standardLtv);
print(" theBlazeMessageBT.appLevelCibilScore===" theBlazeMessageBT.appLevelCibilScore);

if(blazeMessage.request.application.scheme is (known and available) and blazeMessage.request.application.scheme=("130" or "125") and theBlazeMessageBT.appLevelCibilScore is (known and available) and theBlazeMessageBT.appLevelCibilScore <= 730 and numberofacres is (known and available) and numberofacres <=1 and
supplier = 1) then {
actualLTV = theBlazeMessageBT.standardLtv;
  actualLTV = actualLTV*100;

if(actualLTV > 60) then {
	 actualLTV = 60;
}
theBlazeMessageBT.standardLtv = (actualLTV/100);

}
print(" theBlazeMessageBT.standardLtv====manufacturer" theBlazeMessageBT.standardLtv);

  //Funding to NTC in High-Risk District 
for each Applicant in theFMABT.termSetInput.request.application.applicants do{
anApplicant = it;
if( it.applicantType is known and it.applicantType = "P") then {
for each Address in anApplicant.addresses such that(it.pincode is known)do{
	 print("pincode  for applicant ="it.pincode);	
thepincodeApp = apply DT_HighRiskPincode(it.pincode);
  print("thepincode value will be applicant :=="thepincodeApp );
}
}
  if(it.applicantType is known and it.applicantType = "C") then {
    for each Address in anApplicant.addresses such that(it.pincode is known)do{
	 print("pincode  for applicant ="it.pincode);	
thepincodeCoApp = apply DT_HighRiskPincode(it.pincode);
  print("thepincode value will be applicant :=="thepincodeCoApp );
}
  }
}
if(blazeMessage.request.application.scheme is (known and available) and blazeMessage.request.application.scheme=("130" or "125") and
((theBlazeMessageBT.appLevelCibilScore is (known and available) and theBlazeMessageBT.appLevelCibilScore <= 5) or (blazeMessage.request.application.campaign is (known and available) and 
blazeMessage.request.application.campaign = ("New to Credit Customer" or "34"))) and  
numberofacres is (known and available) and numberofacres <=1 and ((thepincodeApp is (known and available) and thepincodeApp = 1) or (thepincodeCoApp is (known and available) and thepincodeCoApp = 1))) then { 
	actualLTV = theBlazeMessageBT.standardLtv;
  print(" blazeMessage.request.application.Campaign-" blazeMessage.request.application.campaign);
    actualLTV = actualLTV*100;
if(actualLTV > 70) then {
	 actualLTV = 70;
}
theBlazeMessageBT.standardLtv = (actualLTV/100);
}
print("theBlazeMessageBT.actualLtv pincode=="theBlazeMessageBT.standardLtv);

    //Funding to Cibil Score <=680
for each Applicant in blazeMessage.request.application.applicants such that (it.applicantType is known and (it.applicantType="P" or it.applicantType="C") and theBlazeMessageBT.appLevelCibilScore is (known and available) and
theBlazeMessageBT.appLevelCibilScore>5 and theBlazeMessageBT.appLevelCibilScore<=680 and (supplier <> 1 or  supplier <> 0) )do{
	isApplicant = true;
}

if(blazeMessage.request.application.scheme="125" and isApplicant = true)then{
actualLTV = theBlazeMessageBT.standardLtv;

    actualLTV = actualLTV*100;
  RestrictedLTV = actualLTV - 10;
  print("LTV restricted:::: 125 scheme==:" RestrictedLTV );
if(actualLTV> 70)then {
	actualLTV = 70;
}
  minLTV=math().min(actualLTV,RestrictedLTV);
theBlazeMessageBT.standardLtv = (minLTV/100);

print("theBlazeMessageBT.actualLtv in scheme 125 = "theBlazeMessageBT.standardLtv);
}
  //Funding to Cibil Score <=680

if(blazeMessage.request.application.scheme="130" and isApplicant = true)then {

actualLTV = theBlazeMessageBT.standardLtv;
    actualLTV = actualLTV*100;
  RestrictedLTV = actualLTV - 10;
  print("LTV restricted:::::in 130 scheme==" RestrictedLTV );
if(actualLTV > 75)then {
	actualLTV = 75;

}
minLTV=math().min(actualLTV,RestrictedLTV);
theBlazeMessageBT.standardLtv = (minLTV/100);
print("theBlazeMessageBT.actualLtv@@"theBlazeMessageBT.standardLtv);

}
 ]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='IwlsNE'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>