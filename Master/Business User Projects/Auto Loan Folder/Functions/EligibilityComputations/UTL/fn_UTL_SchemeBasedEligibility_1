<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_UTL_SchemeBasedEligibility'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_UTL_SchemeBasedEligibility</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[anApplication is some Application initially blazeMessage.request.application;
isSingleApplicantMeetsMinimumNorms is a boolean initially true;
assetDetails is some AssetDetails initially anApplication.assetDetails;
aSchemeGroup is a string initially blazeMessage.request.application.schemeGroup;
aScheme is a string initially blazeMessage.request.application.scheme;
aAssetCategory is a string initially blazeMessage.request.application.assetDetails.detailAssetLoan.assetCategory;
aAssetCost is a real initially blazeMessage.request.application.assetDetails.usedVehicleDetails.assetCost;
loanAmount is a real initially blazeMessage.request.application.loanDetails.loanAmount;
AppFilterDeviation is some array of Deviation initially an array of Deviation;
theBlazeMessageBT.maxEligibleAmount = 0;
maxEligibleAmount is a real initially 0;   		
HigherIncome is a real initially 0;
PrimaryIncome is a real initially 0;
CoAppIncome is a real initially 0;
minimumlookup is an boolean initially false;
primaryApplicant is an boolean initially false;
Coapplicant is an boolean initially false;
aDeviation is  some Deviation initially an Deviation;
aDeviation1 is  some Deviation initially an Deviation;
PriEligible is a real initially 0;
CoEligible is a real initially 0;
//Organized, Non-Organized Programs
fn_ApplicantIncomeComputation(blazeMessage);

if(anApplication.schemeGroup is known and anApplication.schemeGroup="118")then {   		
   //print("inside Schemegroup");
      for each Applicant in blazeMessage.request.application.applicants such that( it.annualIncome is known ) do {
	if(it.applicantType="P") then{
 // aDeviation = DT_UTL_Minimum_income_norms(aSchemeGroup,aScheme,it.customerSegment,it.annualIncome.totalIncome);
	aDeviation = DT_UTL_Minimum_income_norms(aSchemeGroup,aScheme,it.customerSegment,it.annualIncome.totalIncome,blazeMessage.request.application.assetDetails.detailAssetLoan,aAssetCost,blazeMessage.request.application.loanDetails.assesmentMethod);

      PriEligible=it.annualIncome.incomeBasedEligbileAmount;
      
      print("PriEligible1=="it.annualIncome.totalIncome);
      print("PriEligible=="PriEligible);
      if( aDeviation.reasonCode is (known and available)) then{
          primaryApplicant=true;
         PrimaryIncome=it.annualIncome.totalIncome;
  }
 } //Primary aplicant income is closed
	if(it.applicantType<>"P") then{
	//	aDeviation1 = DT_UTL_Minimum_income_norms(aSchemeGroup,aScheme,it.customerSegment,it.annualIncome.totalIncome);
   aDeviation1 = DT_UTL_Minimum_income_norms(aSchemeGroup,aScheme,it.customerSegment,it.annualIncome.totalIncome,blazeMessage.request.application.assetDetails.detailAssetLoan,aAssetCost,blazeMessage.request.application.loanDetails.assesmentMethod);

      print("aDeviation1="aDeviation1.reasonCode);
      print("Coincome=="it.annualIncome.totalIncome);
            CoEligible=CoEligible+it.annualIncome.incomeBasedEligbileAmount;
          if( aDeviation1.reasonCode is (known and available)) then{
			Coapplicant=true;
			CoAppIncome=it.annualIncome.totalIncome;
          }
}  
          }// for loop closed
  	if(blazeMessage.request.application.applicants.count>1)then{
	  if(primaryApplicant=true and Coapplicant=true  and PrimaryIncome<=CoAppIncome)then{
		minimumlookup=true;
		HigherIncome=CoAppIncome;
		HigherIncome=CoEligible;
	print("CiHigher=="HigherIncome);
	}
	else if(  primaryApplicant=true and Coapplicant=true  and CoAppIncome<=PrimaryIncome)then{
		minimumlookup=true;
		HigherIncome=PrimaryIncome;
		HigherIncome=PriEligible;
		  print("PrimaryHigher=="HigherIncome);
	}
}
	else if(primaryApplicant=true  and blazeMessage.request.application.applicants.count=1 )then{
		minimumlookup=true;
		HigherIncome=PrimaryIncome;
		HigherIncome=PriEligible;
	}
   print("PriEligible=="PriEligible);
   print("--CoEligible--"CoEligible);
	if(minimumlookup=false)then{           maxEligibleAmount=PriEligible+CoEligible;                } 
	else { 		 maxEligibleAmount=HigherIncome;     }
   
          theBlazeMessageBT.maxEligibleAmount = maxEligibleAmount;
   

    }  
 
//Banking Program schemes
else if(anApplication.schemeGroup is known and anApplication.schemeGroup="122") then {
	apply fn_UTL_BankingEligibilityComputation(blazeMessage);         
 }
]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='6boB5t'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>