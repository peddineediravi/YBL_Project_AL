<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_IrrigatedLandHolding'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_IrrigatedLandHolding</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>real</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("IrrigatedLandHolding");
irrigatedLandHolding is an real  initially 0.0;
irrigatedLandHolding1  is an real  initially 0.0;
No_acresC is an real initially 0;
rainfedC is a real initially 0;
No_acres is an real initially 0;
rainfed is a real initially 0;
landvalue_amount  is a real initially 0;
anApplicant is some Applicant;
//blazeMessage.request.application.applicants[0].incomes[0].amount;
for each Applicant in blazeMessage.request.application.applicants such that(it.applicantType is (known and available))do{
  	anApplicant =it;
if(it.applicantType="P")then{
		if(it.noOfAcres is (known and available) )then{
			print("acres=="it.noOfAcres);
			No_acres=No_acres+it.noOfAcres;
	}
if( it.rainFedLandHolding is (known and available))then{
		rainfed=rainfed+it.rainFedLandHolding;
 }
 }
 if( it.applicantType<>"P")then{
		if(it.noOfAcres is (known and available))then{
					No_acresC=No_acresC+it.noOfAcres;
	}
	if(it.rainFedLandHolding is (known and available))then{
			rainfedC=rainfedC+it.rainFedLandHolding;
    }
}
       
     
}
if(blazeMessage.request.application.applicants.count>1)then{
		landvalue_amount=(No_acres+No_acresC)+((rainfed+rainfedC)*0.5 );
}else{
		landvalue_amount=(No_acres)+(rainfed*0.5);
}
print("  landvalue_amount=="landvalue_amount);
irrigatedLandHolding=landvalue_amount;
return irrigatedLandHolding;

]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='3xCjwN'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>