<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_MediumRisklessthan31DPDinlast12Monthsandmorethan91DPDin13to24thMonth'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_MediumRisklessthan31DPDinlast12Monthsandmorethan91DPDin13to24thMonth</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>integer</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("Entering MediumRisklessthan31DPDinlast12Monthsandmorethan91DPDin13to24thMonth::::::::");
anApplicant is some Applicant;
historyLength is an integer initially 0;
numberOfMonths is an integer initially 0;
paymentHistory is a string initially "";
noOfDPDBouncesfinal is an integer initially 0;
noOfDPDBounces is an integer initially 0;
noOfDPDBounces1 is an integer initially 0;
//todayDate is a date initially calendar().currentDate();
//testing freeze defult date is '27-Jan-2022';
todayDate is a date  initially  '27-Jan-2022';
todayDate=calendar().date(todayDate);
months is an integer initially 12;
months1 is an integer initially 24;
month is an integer initially 0;
month1 is an integer initially 0;
noOfDPDBounces3 is an integer initially 0;
noOfDPDBounces4 is an integer initially 0;
noOfMonths is an integer initially 0;
noOfDays is an integer initially 0;
accountsCount is an integer initially 0;
for each Applicant in blazeMessage.request.application.applicants such that(it.applicantType is (known and available)
and it.applicantType="P") do {
anApplicant =it; 
if(anApplicant.multiBureauReport is known and anApplicant.multiBureauReport.cibilResponse is (known and available) 
	and 
anApplicant.multiBureauReport.cibilResponse.accounts is (known and available) and 
anApplicant.multiBureauReport.cibilResponse.accounts.count > 0) then {
 
	for each Account in anApplicant.multiBureauReport.cibilResponse.accounts do {	
     
		if(it.dateReportedAndCertified is (known and available) and	todayDate.subtractInDays(it.dateReportedAndCertified).days > 0  and todayDate.subtractInDays(it.dateReportedAndCertified).days <=730)then {
					  print(" in side MediumRisklessthan31DPDinlast12Monthsandmorethan91DPDin13to24thMonth "todayDate.subtractInDays(it.dateReportedAndCertified).days"accountType"it.accountType);
					 
				if(todayDate.subtractInDays(it.dateReportedAndCertified).days>0    
				and todayDate.subtractInDays(it.dateReportedAndCertified).days <= 365)then{
						month=months-todayDate.subtractInMonths(it.dateReportedAndCertified).months;
				print("months"month"accountType="it.accountType);
				} 
				if(todayDate.subtractInDays(it.dateReportedAndCertified).days>0    
				and todayDate.subtractInDays(it.dateReportedAndCertified).days <= 730)then{
						month1=months1-todayDate.subtractInMonths(it.dateReportedAndCertified).months;
						accountsCount=anApplicant.multiBureauReport.cibilResponse.accounts.count;
				print("months1"month1"accountType="it.accountType);
				} 
				print("month::"month"month1"month1); 
			
			if(it.paymentHistory1 is (known and available)) then {
				paymentHistory = it.paymentHistory1;
			}
			if(it.paymentHistory2 is (known and available)) then {
				paymentHistory = paymentHistory.concat(it.paymentHistory2);
			}
			//print("paymentHistory ="paymentHistory);
			historyLength = paymentHistory.length();
			numberOfMonths = math().truncate(historyLength/3);      	
			paymentHistory = paymentHistory.replaceAll("X","0");
			paymentHistory = paymentHistory.replaceAll("DDD", "000");
			paymentHistory = paymentHistory.replaceAll("LSS", "180");
			paymentHistory = paymentHistory.replaceAll("SUB", "180");
			paymentHistory = paymentHistory.replaceAll("DBT", "180");
			paymentHistory = paymentHistory.replaceAll("SMA", "089");
			paymentHistory = paymentHistory.replaceAll("STD", "000");

			monthCounter is a integer initially 0;
			pos1 is an integer initially 0;
			pos2 is an integer initially 3;
			dpdValue is an integer initially 0;
			tempIntArray is some array of integer initially an array of integer;
          noOfDPDBounces2  is an integer initially 0;
        //  print("numberOfMonths"numberOfMonths);
			while(monthCounter <= numberOfMonths-1) do {
				dpdValue=paymentHistory.substring(pos1, pos2) as an integer;
				tempIntArray.append(dpdValue);
				pos1=pos2;
				pos2=pos2+3;
				monthCounter+=1;
			}
			totalCount is a integer initially 0;
			dpdArrCount is an integer initially 0;    
          	dpdArrCount1 is an integer initially 12; 
          	if(dpdArrCount1<=month1)then{
              month1=dpdArrCount1-month1;
            }
			dpdArrCount2 is an integer initially 0; 
			if(tempIntArray.count > 0) then {
				while((dpdArrCount < math().min(tempIntArray.count, month))) do{	
					if(tempIntArray[dpdArrCount] >0 and tempIntArray[dpdArrCount] <31) then {
                      print("tempIntArray["dpdArrCount"]"tempIntArray[dpdArrCount]);
						noOfDPDBounces = noOfDPDBounces +1;					
					}
					dpdArrCount = dpdArrCount +1;					
				}				
				print("noOfDPDBounces::"noOfDPDBounces);
				
				if(noOfDPDBounces>0)then{
					while(dpdArrCount1 < math().min(tempIntArray.count, month1)) do{	
					if(tempIntArray[dpdArrCount1]>91) then {
                      print("tempIntArray["dpdArrCount1"]"tempIntArray[dpdArrCount1]);					
						noOfDPDBounces1 = noOfDPDBounces1 +1;
						}else 	if(tempIntArray[dpdArrCount1] =unknown)then{
                          noOfDPDBounces2 =noOfDPDBounces2+1
                        }					
						dpdArrCount1 = dpdArrCount1+1;
					}
				}else{
                  print("else in side no data in 12 months"month1);
                   print("tempIntArray["dpdArrCount"]"tempIntArray[dpdArrCount]);	
                  while(dpdArrCount < math().min(tempIntArray.count, month1)) do{	
                      print(" inside tempIntArray["dpdArrCount"]"tempIntArray[dpdArrCount]);	
					if(tempIntArray[dpdArrCount]>91) then {
                      print("tempIntArray["dpdArrCount"]"tempIntArray[dpdArrCount]);					
						noOfDPDBounces1 = noOfDPDBounces1 +1;
						}				
						dpdArrCount = dpdArrCount+1;
					}
                }
				print("noOfDPDBounces1::"noOfDPDBounces1"noOfDPDBounces2"noOfDPDBounces2);
              	if(noOfDPDBounces2>0)then{
				 noOfDPDBounces1= noOfDPDBounces2;
                }
			//	noOfDPDBounces2 is an integer initially 0;
				
			//	totalCount=math().min(tempIntArray.count, months1);
			//		while(dpdArrCount2 < math().min(tempIntArray.count, months1)) do{	
			//			if(tempIntArray[dpdArrCount2]=0) then {
			//				print("tempIntArray["dpdArrCount2"]"tempIntArray[dpdArrCount2]);					
			//				noOfDPDBounces2 = noOfDPDBounces2 +1;
			//			}					
			//			dpdArrCount2 = dpdArrCount2+1;
			//		}
			//		print("totalCount::"totalCount"noOfDPDBounces2::"noOfDPDBounces2);
			//		if(totalCount=noOfDPDBounces2)then noOfDPDBounces3=noOfDPDBounces3+1;
			//		print("noOfDPDBounces3::"noOfDPDBounces3);		
				
			}
		}		
	}
}

}
//print("accountsCount::"accountsCount"noOfDPDBounces3::"noOfDPDBounces3);
//if(accountsCount=noOfDPDBounces3)then noOfDPDBounces4=1;
//print("noOfDPDBounces4::"noOfDPDBounces4);
print("MediumRisklessthan31DPDinlast12Months"noOfDPDBounces"morethan91DPDin13to24thMonth dpd"noOfDPDBounces1);
if(noOfDPDBounces1>0)then{
	noOfDPDBouncesfinal=noOfDPDBounces1;
}else if (noOfDPDBounces>0 and noOfDPDBounces1 >0 )then{
  noOfDPDBouncesfinal=noOfDPDBounces;
}else if (noOfDPDBounces=0 and noOfDPDBounces1>0 )then{
  noOfDPDBouncesfinal=noOfDPDBounces1;
}
//else if(noOfDPDBounces4>0)then noOfDPDBouncesfinal=noOfDPDBounces4;
print("MediumRisklessthan31DPDinlast12Monthsandmorethan91DPDin13to24thMonth noOfDPDBouncesfinal::::::::::"noOfDPDBouncesfinal);
return noOfDPDBouncesfinal;]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='VnubXF'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>