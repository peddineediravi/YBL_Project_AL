<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_noOfmonthsRecent90PlusdpdonTractorloans'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_noOfmonthsRecent90PlusdpdonTractorloans</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>string</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("Number of months since recent 90+ dpd on Tractor loans");
anApplicant is some Applicant;
isSecureProduct is a boolean initially false;
historyLength is an integer initially 0;
numberOfMonths is an integer initially 0;
paymentHistory is a string initially "";
noOfDPDBounces is an integer initially 0;
monthList is some array of integer initially an array of integer ;
RecentMonths is an integer initially 0;
month is an integer initially 0;
months is an real initially 0.0;
todayDate is a date initially calendar().currentDate();
//testing freeze defult date is '27-Jan-2022';
//todayDate is a date  initially  '27-Jan-2022';
//todayDate=calendar().date(todayDate);

MonSinceL90P_TL is a string initially "";
TractorCount is an integer initially 0;

for each Applicant in blazeMessage.request.application.applicants such that(it.applicantType is (known and available)
and it.applicantType="P")  do {
  
anApplicant =it; 
	if(anApplicant.multiBureauReport is known and anApplicant.multiBureauReport.cibilResponse is (known and available) and 
		anApplicant.multiBureauReport.cibilResponse.accounts is (known and available) and 
		anApplicant.multiBureauReport.cibilResponse.accounts.count > 0) then {

		
		
		for each Account in anApplicant.multiBureauReport.cibilResponse.accounts such that(it is (known and available)) do{ 
		if (it.accountType is (known and available) and it.accountType =(ignoring case) ("TRACTOR LOAN" or  "Tractor Loan" or "34") and it.dateReportedAndCertified is (known and available)   
       
          )then{
					TractorCount =TractorCount+1;
				//print("inside tractor loans");
						if (it.dateReportedAndCertified is (known and available) and todayDate is (known and available) 
                          and todayDate.subtractInDays(it.dateReportedAndCertified).days>=0 
                        and todayDate.subtractInDays(it.dateReportedAndCertified).days<=1095 )then {
				print("today-dateReportedAndCertified in months"todayDate.subtractInMonths(it.dateReportedAndCertified).months);
				
                      //  if (todayDate.subtractInDays(it.dateReportedAndCertified).days>=0 and todayDate.subtractInDays(it.dateReportedAndCertified).days<=1095) then{
                          months= todayDate.subtractInDays(it.dateReportedAndCertified).days/30;
                        //}
                         
                          print("minimum of months"months);
				if(it.paymentHistory1 is (known and available)) then {
						paymentHistory = it.paymentHistory1;
						}
					if(it.paymentHistory2 is (known and available)) then {
						paymentHistory = paymentHistory.concat(it.paymentHistory2);
						}
			historyLength = paymentHistory.length();
			numberOfMonths = math().truncate(historyLength/3);      	
			paymentHistory = paymentHistory.replaceAll("X","0");
			paymentHistory = paymentHistory.replaceAll("DDD", "000");
			paymentHistory = paymentHistory.replaceAll("LSS", "180");
			paymentHistory = paymentHistory.replaceAll("SUB", "180");
			paymentHistory = paymentHistory.replaceAll("DBT", "180");
			paymentHistory = paymentHistory.replaceAll("SMA", "089");
			paymentHistory = paymentHistory.replaceAll("STD", "000"); 
			

			monthCounter is a integer initially 0;
			pos1 is an integer initially 0;
			pos2 is an integer initially 3;
			dpdValue is an integer initially 0;
			tempIntArray is some array of integer initially an array of integer;
			while(monthCounter <= numberOfMonths-1) do {
				dpdValue=paymentHistory.substring(pos1, pos2) as an integer;
				tempIntArray.append(dpdValue);
				pos1=pos2;
				pos2=pos2+3;
				monthCounter+=1;
			}			
			  dpdArrCount is an integer initially 0;  
             print("tempIntArray.count"tempIntArray.count);
              print("checks for before  months="months);
             if(months<=tempIntArray.count)then{
                months =tempIntArray.count-months;
                }
         
            month =portable().toInteger(months);
             print("checks for months="month);
			if(tempIntArray.count > 0) then {
				while(dpdArrCount< math().min(tempIntArray.count , month) )do{	
                  	print("inside while loooop90+dpd tractorloans dpdArrCount"dpdArrCount"months"month"tempIntArray.count"tempIntArray.count);
					if(tempIntArray[dpdArrCount] >90) then {
                      print("inside Tractor 90 dpd enter Anil");
                      print("tempIntArray["dpdArrCount"] "tempIntArray[dpdArrCount]);
					noOfDPDBounces = noOfDPDBounces +1;
					//MonSinceL90P_TL ="90DPD"
					}
					dpdArrCount = dpdArrCount +1;
				}
			}
			
			}
		
        }
		}
		
} 
}
print("TractorCount="TractorCount);
if(TractorCount >0 and noOfDPDBounces >0)then{
  MonSinceL90P_TL="90DPD";
}else if(TractorCount >0 and noOfDPDBounces =0)then{
   MonSinceL90P_TL="No_90DPD";
}else{
  MonSinceL90P_TL="No_TL_Loan";
}
print("MonSinceL90P_TL"MonSinceL90P_TL);
return MonSinceL90P_TL ;
				]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='71rTR8'>
    <instance ref='ParameterNameVH'>
     <value>blazeMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>