<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_Apply_NewCar_DecisionTables'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_Apply_NewCar_DecisionTables</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[aDeviation is some Deviation;
anApplication is some Application initially theMessage.request.application;
assetDetails is some AssetDetails initially anApplication.assetDetails;
aSchemeGroup is a string initially theMessage.request.application.schemeGroup;
aScheme is a string initially theMessage.request.application.scheme;
aAssetCategory is a string initially theMessage.request.application.assetDetails.detailAssetLoan.assetCategory;
aAssetCost is a real initially theMessage.request.application.assetDetails.newVehicleDetails.assetCost;

//Maximum loan amount Decision table.
LogMessage("Calling Max Loan Amount rules...");
aDeviation = DT_MaxLoanAmount(theMessage);
fn_AppendDeviations(aDeviation);

//LTV Deviations
LogMessage("Calling LTV based rules");
defaultLTV is a real;
defaultLTV=ProcessLTVRules(false);

//Minimum income deviations
if(anApplication.schemeGroup="17")then
  {
    	return;
  }
LogMessage("Calling Min income norm rules...");
isSingleApplicantMeetsMinimumNorms is a boolean initially false;
incomeList is some array of real initially an array of real;
minimumIncome is a real initially 0;
//Checking whether any applicant in the application meeting minimum income norm.
for each Applicant in theMessage.request.application.applicants do {   

			if(isSingleApplicantMeetsMinimumNorms is (known and available) and isSingleApplicantMeetsMinimumNorms = false) then 
            {	
				minimumIncome=0;			
				minimumIncome = DT_MinimumIncomeLookup(anApplication.schemeGroup,anApplication.scheme,it.customerSegment,assetDetails.detailAssetLoan.assetCategory,assetDetails.newVehicleDetails.assetCost);
                
				if(minimumIncome is (available and known) and minimumIncome > 0 ) then {
                    isSingleApplicantMeetsMinimumNorms = (it.annualIncome.totalIncome >= minimumIncome);
					incomeList.append(it.annualIncome.totalIncome);
				}
							 
         	}     
	}
// None of the applicants meeting minimum income norm so triggering deviation on higher income applicant.
	if(isSingleApplicantMeetsMinimumNorms is (known and available) and isSingleApplicantMeetsMinimumNorms = false and incomeList.count>0) then {      
      	for each Applicant in theMessage.request.application.applicants such that (it.annualIncome is(known and available) and it.annualIncome.totalIncome is (known and available) and it.annualIncome.totalIncome=incomeList.max) do  {
				
				aDeviation = DT_MinimumIncomeNorm(aSchemeGroup,aScheme,it.customerSegment,it.annualIncome.totalIncome,aAssetCategory,aAssetCost);
				fn_AppendDeviations(aDeviation);
				
				minimumIncome = DT_MinimumIncomeLookup(aSchemeGroup,aScheme,it.customerSegment,aAssetCategory,aAssetCost);
				
				if(minimumIncome is (available and known) and minimumIncome > 0) then
				{	
					aDeviation = a Deviation;
					tenPercentOfMininmumIncome is a real;
					twentyPercentOfMinimumIncome is a real;
					
					tenPercentOfMininmumIncome=minimumIncome-minimumIncome*0.1;
					twentyPercentOfMinimumIncome=minimumIncome-minimumIncome*0.2;               
					if(it.annualIncome.totalIncome >= tenPercentOfMininmumIncome and it.annualIncome.totalIncome < minimumIncome) then
				{   
                 
						aDeviation.ruleID="MinimumIncomeRule1";
						aDeviation.reasonCode = "40001". 
						aDeviation.overrideLevel = "L1".
						aDeviation.decisionResult="DEVIATION"; 
						aDeviation.reasonText = "Income upto 10% Norms not met".
						fn_AppendDeviations(aDeviation);
				}
					else if(it.annualIncome.totalIncome >= twentyPercentOfMinimumIncome and it.annualIncome.totalIncome < tenPercentOfMininmumIncome) then
					{
   						aDeviation.ruleID="MinimumIncomeRule2";	
						aDeviation.reasonCode = "40002". 
						aDeviation.overrideLevel = "L2".
						aDeviation.decisionResult="DEVIATION"; 
					aDeviation.reasonText = "Income upto 30 %  Norms not met ".
						fn_AppendDeviations(aDeviation);
					}
                  	else if(it.annualIncome.totalIncome < twentyPercentOfMinimumIncome) then
					{
						aDeviation.ruleID="MinimumIncomeRule3";	                 
						aDeviation.reasonCode = "40002". 
						aDeviation.overrideLevel = "L2".
						aDeviation.decisionResult="DEVIATION"; 
						aDeviation.reasonText = "Income more than 30% Norms not met".
						fn_AppendDeviations(aDeviation);
					}
			   }	
		}
    }




]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='CTr6SG'>
    <instance ref='ParameterNameVH'>
     <value>theMessage</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeMessage</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>